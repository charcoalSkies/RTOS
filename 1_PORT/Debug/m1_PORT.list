
m1_PORT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003638  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003748  08003748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003830  08003830  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003830  08003830  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003830  08003830  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003830  08003830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001120  20000074  080038ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001194  080038ac  00021194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a521  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002457  00000000  00000000  0002a5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0002ca18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002d5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192c4  00000000  00000000  0002e040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c575  00000000  00000000  00047304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b93e  00000000  00000000  00053879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df1b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003374  00000000  00000000  000df208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08003730 	.word	0x08003730

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08003730 	.word	0x08003730

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000094 	.word	0x20000094
 800017c:	200000e8 	.word	0x200000e8

08000180 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000186:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <MX_FREERTOS_Init+0x30>)
 8000188:	1d3c      	adds	r4, r7, #4
 800018a:	461d      	mov	r5, r3
 800018c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800018e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000190:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000194:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	2100      	movs	r1, #0
 800019c:	4618      	mov	r0, r3
 800019e:	f001 fbc3 	bl	8001928 <osThreadCreate>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a03      	ldr	r2, [pc, #12]	; (80001b4 <MX_FREERTOS_Init+0x34>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80001a8:	bf00      	nop
 80001aa:	3720      	adds	r7, #32
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bdb0      	pop	{r4, r5, r7, pc}
 80001b0:	08003754 	.word	0x08003754
 80001b4:	20000090 	.word	0x20000090

080001b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	printf("[TASK]StartDefaultTask\n");
 80001c0:	480a      	ldr	r0, [pc, #40]	; (80001ec <StartDefaultTask+0x34>)
 80001c2:	f002 fe2d 	bl	8002e20 <puts>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80001c6:	2200      	movs	r2, #0
 80001c8:	2120      	movs	r1, #32
 80001ca:	4809      	ldr	r0, [pc, #36]	; (80001f0 <StartDefaultTask+0x38>)
 80001cc:	f000 fd82 	bl	8000cd4 <HAL_GPIO_WritePin>
	  osDelay(500);
 80001d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001d4:	f001 fbf4 	bl	80019c0 <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	2120      	movs	r1, #32
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <StartDefaultTask+0x38>)
 80001de:	f000 fd79 	bl	8000cd4 <HAL_GPIO_WritePin>
	  osDelay(500);
 80001e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e6:	f001 fbeb 	bl	80019c0 <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80001ea:	e7ec      	b.n	80001c6 <StartDefaultTask+0xe>
 80001ec:	08003770 	.word	0x08003770
 80001f0:	40010800 	.word	0x40010800

080001f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b088      	sub	sp, #32
 80001f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001fa:	f107 0310 	add.w	r3, r7, #16
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000208:	4b2d      	ldr	r3, [pc, #180]	; (80002c0 <MX_GPIO_Init+0xcc>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a2c      	ldr	r2, [pc, #176]	; (80002c0 <MX_GPIO_Init+0xcc>)
 800020e:	f043 0310 	orr.w	r3, r3, #16
 8000212:	6193      	str	r3, [r2, #24]
 8000214:	4b2a      	ldr	r3, [pc, #168]	; (80002c0 <MX_GPIO_Init+0xcc>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f003 0310 	and.w	r3, r3, #16
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000220:	4b27      	ldr	r3, [pc, #156]	; (80002c0 <MX_GPIO_Init+0xcc>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	4a26      	ldr	r2, [pc, #152]	; (80002c0 <MX_GPIO_Init+0xcc>)
 8000226:	f043 0320 	orr.w	r3, r3, #32
 800022a:	6193      	str	r3, [r2, #24]
 800022c:	4b24      	ldr	r3, [pc, #144]	; (80002c0 <MX_GPIO_Init+0xcc>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	f003 0320 	and.w	r3, r3, #32
 8000234:	60bb      	str	r3, [r7, #8]
 8000236:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000238:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <MX_GPIO_Init+0xcc>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a20      	ldr	r2, [pc, #128]	; (80002c0 <MX_GPIO_Init+0xcc>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b1e      	ldr	r3, [pc, #120]	; (80002c0 <MX_GPIO_Init+0xcc>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0304 	and.w	r3, r3, #4
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <MX_GPIO_Init+0xcc>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a1a      	ldr	r2, [pc, #104]	; (80002c0 <MX_GPIO_Init+0xcc>)
 8000256:	f043 0308 	orr.w	r3, r3, #8
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <MX_GPIO_Init+0xcc>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0308 	and.w	r3, r3, #8
 8000264:	603b      	str	r3, [r7, #0]
 8000266:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	2120      	movs	r1, #32
 800026c:	4815      	ldr	r0, [pc, #84]	; (80002c4 <MX_GPIO_Init+0xd0>)
 800026e:	f000 fd31 	bl	8000cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000272:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <MX_GPIO_Init+0xd4>)
 800027a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027c:	2300      	movs	r3, #0
 800027e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000280:	f107 0310 	add.w	r3, r7, #16
 8000284:	4619      	mov	r1, r3
 8000286:	4811      	ldr	r0, [pc, #68]	; (80002cc <MX_GPIO_Init+0xd8>)
 8000288:	f000 fba0 	bl	80009cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800028c:	2320      	movs	r3, #32
 800028e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000290:	2301      	movs	r3, #1
 8000292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000294:	2300      	movs	r3, #0
 8000296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000298:	2302      	movs	r3, #2
 800029a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800029c:	f107 0310 	add.w	r3, r7, #16
 80002a0:	4619      	mov	r1, r3
 80002a2:	4808      	ldr	r0, [pc, #32]	; (80002c4 <MX_GPIO_Init+0xd0>)
 80002a4:	f000 fb92 	bl	80009cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2105      	movs	r1, #5
 80002ac:	2028      	movs	r0, #40	; 0x28
 80002ae:	f000 fb56 	bl	800095e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002b2:	2028      	movs	r0, #40	; 0x28
 80002b4:	f000 fb6f 	bl	8000996 <HAL_NVIC_EnableIRQ>

}
 80002b8:	bf00      	nop
 80002ba:	3720      	adds	r7, #32
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40010800 	.word	0x40010800
 80002c8:	10110000 	.word	0x10110000
 80002cc:	40011000 	.word	0x40011000

080002d0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 if ( ch == '\n' )
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b0a      	cmp	r3, #10
 80002dc:	d106      	bne.n	80002ec <__io_putchar+0x1c>
	 HAL_UART_Transmit(&huart2, (uint8_t*)&"\r", 1, HAL_MAX_DELAY);
 80002de:	f04f 33ff 	mov.w	r3, #4294967295
 80002e2:	2201      	movs	r2, #1
 80002e4:	4907      	ldr	r1, [pc, #28]	; (8000304 <__io_putchar+0x34>)
 80002e6:	4808      	ldr	r0, [pc, #32]	; (8000308 <__io_putchar+0x38>)
 80002e8:	f001 f995 	bl	8001616 <HAL_UART_Transmit>
 HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80002ec:	1d39      	adds	r1, r7, #4
 80002ee:	f04f 33ff 	mov.w	r3, #4294967295
 80002f2:	2201      	movs	r2, #1
 80002f4:	4804      	ldr	r0, [pc, #16]	; (8000308 <__io_putchar+0x38>)
 80002f6:	f001 f98e 	bl	8001616 <HAL_UART_Transmit>
 return ch;
 80002fa:	687b      	ldr	r3, [r7, #4]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	08003788 	.word	0x08003788
 8000308:	200002ec 	.word	0x200002ec

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000310:	f000 f9ec 	bl	80006ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000314:	f000 f80e 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000318:	f7ff ff6c 	bl	80001f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800031c:	f000 f958 	bl	80005d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello World!\n");
 8000320:	4803      	ldr	r0, [pc, #12]	; (8000330 <main+0x24>)
 8000322:	f002 fd7d 	bl	8002e20 <puts>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000326:	f7ff ff2b 	bl	8000180 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800032a:	f001 faf6 	bl	800191a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800032e:	e7fe      	b.n	800032e <main+0x22>
 8000330:	0800378c 	.word	0x0800378c

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b090      	sub	sp, #64	; 0x40
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0318 	add.w	r3, r7, #24
 800033e:	2228      	movs	r2, #40	; 0x28
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f002 fcf6 	bl	8002d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000356:	2302      	movs	r3, #2
 8000358:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035a:	2301      	movs	r3, #1
 800035c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035e:	2310      	movs	r3, #16
 8000360:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	2302      	movs	r3, #2
 8000364:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000366:	2300      	movs	r3, #0
 8000368:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800036a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800036e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000370:	f107 0318 	add.w	r3, r7, #24
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fce7 	bl	8000d48 <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000380:	f000 f819 	bl	80003b6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	230f      	movs	r3, #15
 8000386:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000388:	2302      	movs	r3, #2
 800038a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2102      	movs	r1, #2
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 ff54 	bl	800124c <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003aa:	f000 f804 	bl	80003b6 <Error_Handler>
  }
}
 80003ae:	bf00      	nop
 80003b0:	3740      	adds	r7, #64	; 0x40
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ba:	b672      	cpsid	i
}
 80003bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003be:	e7fe      	b.n	80003be <Error_Handler+0x8>

080003c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003c6:	4b18      	ldr	r3, [pc, #96]	; (8000428 <HAL_MspInit+0x68>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4a17      	ldr	r2, [pc, #92]	; (8000428 <HAL_MspInit+0x68>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6193      	str	r3, [r2, #24]
 80003d2:	4b15      	ldr	r3, [pc, #84]	; (8000428 <HAL_MspInit+0x68>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003de:	4b12      	ldr	r3, [pc, #72]	; (8000428 <HAL_MspInit+0x68>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	4a11      	ldr	r2, [pc, #68]	; (8000428 <HAL_MspInit+0x68>)
 80003e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e8:	61d3      	str	r3, [r2, #28]
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <HAL_MspInit+0x68>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	210f      	movs	r1, #15
 80003fa:	f06f 0001 	mvn.w	r0, #1
 80003fe:	f000 faae 	bl	800095e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <HAL_MspInit+0x6c>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <HAL_MspInit+0x6c>)
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041e:	bf00      	nop
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000
 800042c:	40010000 	.word	0x40010000

08000430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000434:	e7fe      	b.n	8000434 <NMI_Handler+0x4>

08000436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800043a:	e7fe      	b.n	800043a <HardFault_Handler+0x4>

0800043c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000440:	e7fe      	b.n	8000440 <MemManage_Handler+0x4>

08000442 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000446:	e7fe      	b.n	8000446 <BusFault_Handler+0x4>

08000448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800044c:	e7fe      	b.n	800044c <UsageFault_Handler+0x4>

0800044e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr

0800045a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800045e:	f000 f98b 	bl	8000778 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000462:	f002 f82b 	bl	80024bc <xTaskGetSchedulerState>
 8000466:	4603      	mov	r3, r0
 8000468:	2b01      	cmp	r3, #1
 800046a:	d001      	beq.n	8000470 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800046c:	f002 fa1c 	bl	80028a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}

08000474 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000478:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800047c:	f000 fc42 	bl	8000d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}

08000484 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	e00a      	b.n	80004ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000496:	f3af 8000 	nop.w
 800049a:	4601      	mov	r1, r0
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	60ba      	str	r2, [r7, #8]
 80004a2:	b2ca      	uxtb	r2, r1
 80004a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	3301      	adds	r3, #1
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	dbf0      	blt.n	8000496 <_read+0x12>
	}

return len;
 80004b4:	687b      	ldr	r3, [r7, #4]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b086      	sub	sp, #24
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	60f8      	str	r0, [r7, #12]
 80004c6:	60b9      	str	r1, [r7, #8]
 80004c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
 80004ce:	e009      	b.n	80004e4 <_write+0x26>
	{
		__io_putchar(*ptr++);	// overriding
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	1c5a      	adds	r2, r3, #1
 80004d4:	60ba      	str	r2, [r7, #8]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fef9 	bl	80002d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	3301      	adds	r3, #1
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	697a      	ldr	r2, [r7, #20]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	dbf1      	blt.n	80004d0 <_write+0x12>
	}
	return len;
 80004ec:	687b      	ldr	r3, [r7, #4]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3718      	adds	r7, #24
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <_close>:

int _close(int file)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
	return -1;
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800051c:	605a      	str	r2, [r3, #4]
	return 0;
 800051e:	2300      	movs	r3, #0
}
 8000520:	4618      	mov	r0, r3
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr

0800052a <_isatty>:

int _isatty(int file)
{
 800052a:	b480      	push	{r7}
 800052c:	b083      	sub	sp, #12
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
	return 1;
 8000532:	2301      	movs	r3, #1
}
 8000534:	4618      	mov	r0, r3
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800053e:	b480      	push	{r7}
 8000540:	b085      	sub	sp, #20
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
	return 0;
 800054a:	2300      	movs	r3, #0
}
 800054c:	4618      	mov	r0, r3
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
	...

08000558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000560:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <_sbrk+0x5c>)
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <_sbrk+0x60>)
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <_sbrk+0x64>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d102      	bne.n	800057a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <_sbrk+0x64>)
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <_sbrk+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	429a      	cmp	r2, r3
 8000586:	d207      	bcs.n	8000598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000588:	f002 fbaa 	bl	8002ce0 <__errno>
 800058c:	4603      	mov	r3, r0
 800058e:	220c      	movs	r2, #12
 8000590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	e009      	b.n	80005ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <_sbrk+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <_sbrk+0x64>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <_sbrk+0x64>)
 80005a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20005000 	.word	0x20005000
 80005b8:	00000400 	.word	0x00000400
 80005bc:	200002e8 	.word	0x200002e8
 80005c0:	20001198 	.word	0x20001198

080005c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_USART2_UART_Init+0x50>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_USART2_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_USART2_UART_Init+0x4c>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_USART2_UART_Init+0x4c>)
 8000608:	f000 ffb8 	bl	800157c <HAL_UART_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000612:	f7ff fed0 	bl	80003b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200002ec 	.word	0x200002ec
 8000620:	40004400 	.word	0x40004400

08000624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a15      	ldr	r2, [pc, #84]	; (8000694 <HAL_UART_MspInit+0x70>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d123      	bne.n	800068c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <HAL_UART_MspInit+0x74>)
 8000646:	69db      	ldr	r3, [r3, #28]
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <HAL_UART_MspInit+0x74>)
 800064a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064e:	61d3      	str	r3, [r2, #28]
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <HAL_UART_MspInit+0x74>)
 8000652:	69db      	ldr	r3, [r3, #28]
 8000654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <HAL_UART_MspInit+0x74>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <HAL_UART_MspInit+0x74>)
 8000662:	f043 0304 	orr.w	r3, r3, #4
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <HAL_UART_MspInit+0x74>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000674:	230c      	movs	r3, #12
 8000676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	2302      	movs	r3, #2
 800067a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2302      	movs	r3, #2
 800067e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	4619      	mov	r1, r3
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <HAL_UART_MspInit+0x78>)
 8000688:	f000 f9a0 	bl	80009cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40004400 	.word	0x40004400
 8000698:	40021000 	.word	0x40021000
 800069c:	40010800 	.word	0x40010800

080006a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006a2:	490d      	ldr	r1, [pc, #52]	; (80006d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006b8:	4c0a      	ldr	r4, [pc, #40]	; (80006e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006c6:	f7ff ff7d 	bl	80005c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ca:	f002 fb0f 	bl	8002cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff fe1d 	bl	800030c <main>
  bx lr
 80006d2:	4770      	bx	lr
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80006dc:	08003838 	.word	0x08003838
  ldr r2, =_sbss
 80006e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80006e4:	20001194 	.word	0x20001194

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <HAL_Init+0x28>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_Init+0x28>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 f923 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000702:	200f      	movs	r0, #15
 8000704:	f000 f808 	bl	8000718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000708:	f7ff fe5a 	bl	80003c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40022000 	.word	0x40022000

08000718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_InitTick+0x54>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_InitTick+0x58>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f93b 	bl	80009b2 <HAL_SYSTICK_Config>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e00e      	b.n	8000764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d80a      	bhi.n	8000762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074c:	2200      	movs	r2, #0
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f000 f903 	bl	800095e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <HAL_InitTick+0x5c>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	e000      	b.n	8000764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000000 	.word	0x20000000
 8000770:	20000008 	.word	0x20000008
 8000774:	20000004 	.word	0x20000004

08000778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x1c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_IncTick+0x20>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4413      	add	r3, r2
 8000788:	4a03      	ldr	r2, [pc, #12]	; (8000798 <HAL_IncTick+0x20>)
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	20000008 	.word	0x20000008
 8000798:	20000330 	.word	0x20000330

0800079c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <HAL_GetTick+0x10>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000330 	.word	0x20000330

080007b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0b      	blt.n	800083e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 021f 	and.w	r2, r3, #31
 800082c:	4906      	ldr	r1, [pc, #24]	; (8000848 <__NVIC_EnableIRQ+0x34>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	210f      	movs	r1, #15
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f7ff ff90 	bl	800084c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff2d 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000970:	f7ff ff42 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 8000974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff ff90 	bl	80008a0 <NVIC_EncodePriority>
 8000980:	4602      	mov	r2, r0
 8000982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff5f 	bl	800084c <__NVIC_SetPriority>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff35 	bl	8000814 <__NVIC_EnableIRQ>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ffa2 	bl	8000904 <SysTick_Config>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b08b      	sub	sp, #44	; 0x2c
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009de:	e169      	b.n	8000cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009e0:	2201      	movs	r2, #1
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	69fa      	ldr	r2, [r7, #28]
 80009f0:	4013      	ands	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	f040 8158 	bne.w	8000cae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	4a9a      	ldr	r2, [pc, #616]	; (8000c6c <HAL_GPIO_Init+0x2a0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d05e      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a08:	4a98      	ldr	r2, [pc, #608]	; (8000c6c <HAL_GPIO_Init+0x2a0>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d875      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a0e:	4a98      	ldr	r2, [pc, #608]	; (8000c70 <HAL_GPIO_Init+0x2a4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d058      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a14:	4a96      	ldr	r2, [pc, #600]	; (8000c70 <HAL_GPIO_Init+0x2a4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d86f      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a1a:	4a96      	ldr	r2, [pc, #600]	; (8000c74 <HAL_GPIO_Init+0x2a8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d052      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a20:	4a94      	ldr	r2, [pc, #592]	; (8000c74 <HAL_GPIO_Init+0x2a8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d869      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a26:	4a94      	ldr	r2, [pc, #592]	; (8000c78 <HAL_GPIO_Init+0x2ac>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d04c      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a2c:	4a92      	ldr	r2, [pc, #584]	; (8000c78 <HAL_GPIO_Init+0x2ac>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d863      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a32:	4a92      	ldr	r2, [pc, #584]	; (8000c7c <HAL_GPIO_Init+0x2b0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d046      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
 8000a38:	4a90      	ldr	r2, [pc, #576]	; (8000c7c <HAL_GPIO_Init+0x2b0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d85d      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a3e:	2b12      	cmp	r3, #18
 8000a40:	d82a      	bhi.n	8000a98 <HAL_GPIO_Init+0xcc>
 8000a42:	2b12      	cmp	r3, #18
 8000a44:	d859      	bhi.n	8000afa <HAL_GPIO_Init+0x12e>
 8000a46:	a201      	add	r2, pc, #4	; (adr r2, 8000a4c <HAL_GPIO_Init+0x80>)
 8000a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4c:	08000ac7 	.word	0x08000ac7
 8000a50:	08000aa1 	.word	0x08000aa1
 8000a54:	08000ab3 	.word	0x08000ab3
 8000a58:	08000af5 	.word	0x08000af5
 8000a5c:	08000afb 	.word	0x08000afb
 8000a60:	08000afb 	.word	0x08000afb
 8000a64:	08000afb 	.word	0x08000afb
 8000a68:	08000afb 	.word	0x08000afb
 8000a6c:	08000afb 	.word	0x08000afb
 8000a70:	08000afb 	.word	0x08000afb
 8000a74:	08000afb 	.word	0x08000afb
 8000a78:	08000afb 	.word	0x08000afb
 8000a7c:	08000afb 	.word	0x08000afb
 8000a80:	08000afb 	.word	0x08000afb
 8000a84:	08000afb 	.word	0x08000afb
 8000a88:	08000afb 	.word	0x08000afb
 8000a8c:	08000afb 	.word	0x08000afb
 8000a90:	08000aa9 	.word	0x08000aa9
 8000a94:	08000abd 	.word	0x08000abd
 8000a98:	4a79      	ldr	r2, [pc, #484]	; (8000c80 <HAL_GPIO_Init+0x2b4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d013      	beq.n	8000ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a9e:	e02c      	b.n	8000afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	623b      	str	r3, [r7, #32]
          break;
 8000aa6:	e029      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	3304      	adds	r3, #4
 8000aae:	623b      	str	r3, [r7, #32]
          break;
 8000ab0:	e024      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e01f      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	330c      	adds	r3, #12
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e01a      	b.n	8000afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	623b      	str	r3, [r7, #32]
          break;
 8000ad2:	e013      	b.n	8000afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d105      	bne.n	8000ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000adc:	2308      	movs	r3, #8
 8000ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	611a      	str	r2, [r3, #16]
          break;
 8000ae6:	e009      	b.n	8000afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	615a      	str	r2, [r3, #20]
          break;
 8000af2:	e003      	b.n	8000afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	e000      	b.n	8000afc <HAL_GPIO_Init+0x130>
          break;
 8000afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d801      	bhi.n	8000b06 <HAL_GPIO_Init+0x13a>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	e001      	b.n	8000b0a <HAL_GPIO_Init+0x13e>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	2bff      	cmp	r3, #255	; 0xff
 8000b10:	d802      	bhi.n	8000b18 <HAL_GPIO_Init+0x14c>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	e002      	b.n	8000b1e <HAL_GPIO_Init+0x152>
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	3b08      	subs	r3, #8
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	210f      	movs	r1, #15
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	401a      	ands	r2, r3
 8000b30:	6a39      	ldr	r1, [r7, #32]
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 80b1 	beq.w	8000cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4c:	4b4d      	ldr	r3, [pc, #308]	; (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a4c      	ldr	r2, [pc, #304]	; (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <HAL_GPIO_Init+0x2b8>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b64:	4a48      	ldr	r2, [pc, #288]	; (8000c88 <HAL_GPIO_Init+0x2bc>)
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	220f      	movs	r2, #15
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a40      	ldr	r2, [pc, #256]	; (8000c8c <HAL_GPIO_Init+0x2c0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d013      	beq.n	8000bb8 <HAL_GPIO_Init+0x1ec>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a3f      	ldr	r2, [pc, #252]	; (8000c90 <HAL_GPIO_Init+0x2c4>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d00d      	beq.n	8000bb4 <HAL_GPIO_Init+0x1e8>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a3e      	ldr	r2, [pc, #248]	; (8000c94 <HAL_GPIO_Init+0x2c8>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d007      	beq.n	8000bb0 <HAL_GPIO_Init+0x1e4>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a3d      	ldr	r2, [pc, #244]	; (8000c98 <HAL_GPIO_Init+0x2cc>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d101      	bne.n	8000bac <HAL_GPIO_Init+0x1e0>
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e006      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bac:	2304      	movs	r3, #4
 8000bae:	e004      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e002      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <HAL_GPIO_Init+0x1ee>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bbc:	f002 0203 	and.w	r2, r2, #3
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	4093      	lsls	r3, r2
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bca:	492f      	ldr	r1, [pc, #188]	; (8000c88 <HAL_GPIO_Init+0x2bc>)
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d006      	beq.n	8000bf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	492c      	ldr	r1, [pc, #176]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	600b      	str	r3, [r1, #0]
 8000bf0:	e006      	b.n	8000c00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	4928      	ldr	r1, [pc, #160]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d006      	beq.n	8000c1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c0c:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	4922      	ldr	r1, [pc, #136]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	604b      	str	r3, [r1, #4]
 8000c18:	e006      	b.n	8000c28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	491e      	ldr	r1, [pc, #120]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	4918      	ldr	r1, [pc, #96]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	608b      	str	r3, [r1, #8]
 8000c40:	e006      	b.n	8000c50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4914      	ldr	r1, [pc, #80]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d021      	beq.n	8000ca0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	490e      	ldr	r1, [pc, #56]	; (8000c9c <HAL_GPIO_Init+0x2d0>)
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	60cb      	str	r3, [r1, #12]
 8000c68:	e021      	b.n	8000cae <HAL_GPIO_Init+0x2e2>
 8000c6a:	bf00      	nop
 8000c6c:	10320000 	.word	0x10320000
 8000c70:	10310000 	.word	0x10310000
 8000c74:	10220000 	.word	0x10220000
 8000c78:	10210000 	.word	0x10210000
 8000c7c:	10120000 	.word	0x10120000
 8000c80:	10110000 	.word	0x10110000
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010000 	.word	0x40010000
 8000c8c:	40010800 	.word	0x40010800
 8000c90:	40010c00 	.word	0x40010c00
 8000c94:	40011000 	.word	0x40011000
 8000c98:	40011400 	.word	0x40011400
 8000c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_GPIO_Init+0x304>)
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	4909      	ldr	r1, [pc, #36]	; (8000cd0 <HAL_GPIO_Init+0x304>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f47f ae8e 	bne.w	80009e0 <HAL_GPIO_Init+0x14>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	372c      	adds	r7, #44	; 0x2c
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	40010400 	.word	0x40010400

08000cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ce4:	787b      	ldrb	r3, [r7, #1]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cf0:	e003      	b.n	8000cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	041a      	lsls	r2, r3, #16
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	611a      	str	r2, [r3, #16]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d10:	695a      	ldr	r2, [r3, #20]
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	4013      	ands	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f806 	bl	8000d34 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40010400 	.word	0x40010400

08000d34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e272      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 8087 	beq.w	8000e76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d68:	4b92      	ldr	r3, [pc, #584]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 030c 	and.w	r3, r3, #12
 8000d70:	2b04      	cmp	r3, #4
 8000d72:	d00c      	beq.n	8000d8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d74:	4b8f      	ldr	r3, [pc, #572]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 030c 	and.w	r3, r3, #12
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d112      	bne.n	8000da6 <HAL_RCC_OscConfig+0x5e>
 8000d80:	4b8c      	ldr	r3, [pc, #560]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d8c:	d10b      	bne.n	8000da6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8e:	4b89      	ldr	r3, [pc, #548]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d06c      	beq.n	8000e74 <HAL_RCC_OscConfig+0x12c>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d168      	bne.n	8000e74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e24c      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dae:	d106      	bne.n	8000dbe <HAL_RCC_OscConfig+0x76>
 8000db0:	4b80      	ldr	r3, [pc, #512]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a7f      	ldr	r2, [pc, #508]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	e02e      	b.n	8000e1c <HAL_RCC_OscConfig+0xd4>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10c      	bne.n	8000de0 <HAL_RCC_OscConfig+0x98>
 8000dc6:	4b7b      	ldr	r3, [pc, #492]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a7a      	ldr	r2, [pc, #488]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	4b78      	ldr	r3, [pc, #480]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a77      	ldr	r2, [pc, #476]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e01d      	b.n	8000e1c <HAL_RCC_OscConfig+0xd4>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000de8:	d10c      	bne.n	8000e04 <HAL_RCC_OscConfig+0xbc>
 8000dea:	4b72      	ldr	r3, [pc, #456]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a71      	ldr	r2, [pc, #452]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b6f      	ldr	r3, [pc, #444]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a6e      	ldr	r2, [pc, #440]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e00b      	b.n	8000e1c <HAL_RCC_OscConfig+0xd4>
 8000e04:	4b6b      	ldr	r3, [pc, #428]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a6a      	ldr	r2, [pc, #424]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	4b68      	ldr	r3, [pc, #416]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a67      	ldr	r2, [pc, #412]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d013      	beq.n	8000e4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e24:	f7ff fcba 	bl	800079c <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e2c:	f7ff fcb6 	bl	800079c <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b64      	cmp	r3, #100	; 0x64
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e200      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3e:	4b5d      	ldr	r3, [pc, #372]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f0      	beq.n	8000e2c <HAL_RCC_OscConfig+0xe4>
 8000e4a:	e014      	b.n	8000e76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fca6 	bl	800079c <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e54:	f7ff fca2 	bl	800079c <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b64      	cmp	r3, #100	; 0x64
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e1ec      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e66:	4b53      	ldr	r3, [pc, #332]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f0      	bne.n	8000e54 <HAL_RCC_OscConfig+0x10c>
 8000e72:	e000      	b.n	8000e76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d063      	beq.n	8000f4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e82:	4b4c      	ldr	r3, [pc, #304]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 030c 	and.w	r3, r3, #12
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00b      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e8e:	4b49      	ldr	r3, [pc, #292]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 030c 	and.w	r3, r3, #12
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d11c      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x18c>
 8000e9a:	4b46      	ldr	r3, [pc, #280]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d116      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea6:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d005      	beq.n	8000ebe <HAL_RCC_OscConfig+0x176>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d001      	beq.n	8000ebe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e1c0      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ebe:	4b3d      	ldr	r3, [pc, #244]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	4939      	ldr	r1, [pc, #228]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed2:	e03a      	b.n	8000f4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d020      	beq.n	8000f1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000edc:	4b36      	ldr	r3, [pc, #216]	; (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fc5b 	bl	800079c <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eea:	f7ff fc57 	bl	800079c <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e1a1      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efc:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f0      	beq.n	8000eea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f08:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4927      	ldr	r1, [pc, #156]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	600b      	str	r3, [r1, #0]
 8000f1c:	e015      	b.n	8000f4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <HAL_RCC_OscConfig+0x270>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fc3a 	bl	800079c <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f2c:	f7ff fc36 	bl	800079c <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e180      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f0      	bne.n	8000f2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d03a      	beq.n	8000fcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d019      	beq.n	8000f92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_RCC_OscConfig+0x274>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f64:	f7ff fc1a 	bl	800079c <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f6c:	f7ff fc16 	bl	800079c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e160      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f000 fad8 	bl	8001540 <RCC_Delay>
 8000f90:	e01c      	b.n	8000fcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_RCC_OscConfig+0x274>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f98:	f7ff fc00 	bl	800079c <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f9e:	e00f      	b.n	8000fc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fbfc 	bl	800079c <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d908      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e146      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	42420000 	.word	0x42420000
 8000fbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc0:	4b92      	ldr	r3, [pc, #584]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1e9      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 80a6 	beq.w	8001126 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fde:	4b8b      	ldr	r3, [pc, #556]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10d      	bne.n	8001006 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b88      	ldr	r3, [pc, #544]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a87      	ldr	r2, [pc, #540]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b85      	ldr	r3, [pc, #532]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001002:	2301      	movs	r3, #1
 8001004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001006:	4b82      	ldr	r3, [pc, #520]	; (8001210 <HAL_RCC_OscConfig+0x4c8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100e:	2b00      	cmp	r3, #0
 8001010:	d118      	bne.n	8001044 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001012:	4b7f      	ldr	r3, [pc, #508]	; (8001210 <HAL_RCC_OscConfig+0x4c8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a7e      	ldr	r2, [pc, #504]	; (8001210 <HAL_RCC_OscConfig+0x4c8>)
 8001018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800101e:	f7ff fbbd 	bl	800079c <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001026:	f7ff fbb9 	bl	800079c <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b64      	cmp	r3, #100	; 0x64
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e103      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001038:	4b75      	ldr	r3, [pc, #468]	; (8001210 <HAL_RCC_OscConfig+0x4c8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f0      	beq.n	8001026 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d106      	bne.n	800105a <HAL_RCC_OscConfig+0x312>
 800104c:	4b6f      	ldr	r3, [pc, #444]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4a6e      	ldr	r2, [pc, #440]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6213      	str	r3, [r2, #32]
 8001058:	e02d      	b.n	80010b6 <HAL_RCC_OscConfig+0x36e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10c      	bne.n	800107c <HAL_RCC_OscConfig+0x334>
 8001062:	4b6a      	ldr	r3, [pc, #424]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	4a69      	ldr	r2, [pc, #420]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001068:	f023 0301 	bic.w	r3, r3, #1
 800106c:	6213      	str	r3, [r2, #32]
 800106e:	4b67      	ldr	r3, [pc, #412]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	4a66      	ldr	r2, [pc, #408]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001074:	f023 0304 	bic.w	r3, r3, #4
 8001078:	6213      	str	r3, [r2, #32]
 800107a:	e01c      	b.n	80010b6 <HAL_RCC_OscConfig+0x36e>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	2b05      	cmp	r3, #5
 8001082:	d10c      	bne.n	800109e <HAL_RCC_OscConfig+0x356>
 8001084:	4b61      	ldr	r3, [pc, #388]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	4a60      	ldr	r2, [pc, #384]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6213      	str	r3, [r2, #32]
 8001090:	4b5e      	ldr	r3, [pc, #376]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4a5d      	ldr	r2, [pc, #372]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6213      	str	r3, [r2, #32]
 800109c:	e00b      	b.n	80010b6 <HAL_RCC_OscConfig+0x36e>
 800109e:	4b5b      	ldr	r3, [pc, #364]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	6a1b      	ldr	r3, [r3, #32]
 80010a2:	4a5a      	ldr	r2, [pc, #360]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	f023 0301 	bic.w	r3, r3, #1
 80010a8:	6213      	str	r3, [r2, #32]
 80010aa:	4b58      	ldr	r3, [pc, #352]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	4a57      	ldr	r2, [pc, #348]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	f023 0304 	bic.w	r3, r3, #4
 80010b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d015      	beq.n	80010ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010be:	f7ff fb6d 	bl	800079c <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c4:	e00a      	b.n	80010dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c6:	f7ff fb69 	bl	800079c <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e0b1      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010dc:	4b4b      	ldr	r3, [pc, #300]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0ee      	beq.n	80010c6 <HAL_RCC_OscConfig+0x37e>
 80010e8:	e014      	b.n	8001114 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ea:	f7ff fb57 	bl	800079c <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f0:	e00a      	b.n	8001108 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f2:	f7ff fb53 	bl	800079c <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001100:	4293      	cmp	r3, r2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e09b      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001108:	4b40      	ldr	r3, [pc, #256]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1ee      	bne.n	80010f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d105      	bne.n	8001126 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800111a:	4b3c      	ldr	r3, [pc, #240]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a3b      	ldr	r2, [pc, #236]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001124:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 8087 	beq.w	800123e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001130:	4b36      	ldr	r3, [pc, #216]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	2b08      	cmp	r3, #8
 800113a:	d061      	beq.n	8001200 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d146      	bne.n	80011d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001144:	4b33      	ldr	r3, [pc, #204]	; (8001214 <HAL_RCC_OscConfig+0x4cc>)
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fb27 	bl	800079c <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001152:	f7ff fb23 	bl	800079c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e06d      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001164:	4b29      	ldr	r3, [pc, #164]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f0      	bne.n	8001152 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001178:	d108      	bne.n	800118c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	4921      	ldr	r1, [pc, #132]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a19      	ldr	r1, [r3, #32]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	430b      	orrs	r3, r1
 800119e:	491b      	ldr	r1, [pc, #108]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_RCC_OscConfig+0x4cc>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011aa:	f7ff faf7 	bl	800079c <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b2:	f7ff faf3 	bl	800079c <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e03d      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x46a>
 80011d0:	e035      	b.n	800123e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_RCC_OscConfig+0x4cc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fae0 	bl	800079c <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e0:	f7ff fadc 	bl	800079c <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e026      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x498>
 80011fe:	e01e      	b.n	800123e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d107      	bne.n	8001218 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e019      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
 800120c:	40021000 	.word	0x40021000
 8001210:	40007000 	.word	0x40007000
 8001214:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_RCC_OscConfig+0x500>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	429a      	cmp	r2, r3
 800122a:	d106      	bne.n	800123a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001236:	429a      	cmp	r2, r3
 8001238:	d001      	beq.n	800123e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0d0      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001260:	4b6a      	ldr	r3, [pc, #424]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d910      	bls.n	8001290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126e:	4b67      	ldr	r3, [pc, #412]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f023 0207 	bic.w	r2, r3, #7
 8001276:	4965      	ldr	r1, [pc, #404]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800127e:	4b63      	ldr	r3, [pc, #396]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d001      	beq.n	8001290 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0b8      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d020      	beq.n	80012de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a8:	4b59      	ldr	r3, [pc, #356]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	4a58      	ldr	r2, [pc, #352]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c0:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4a52      	ldr	r2, [pc, #328]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012cc:	4b50      	ldr	r3, [pc, #320]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	494d      	ldr	r1, [pc, #308]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d040      	beq.n	800136c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d115      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e07f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d107      	bne.n	800131a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130a:	4b41      	ldr	r3, [pc, #260]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e073      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131a:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e06b      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132a:	4b39      	ldr	r3, [pc, #228]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f023 0203 	bic.w	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	4936      	ldr	r1, [pc, #216]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800133c:	f7ff fa2e 	bl	800079c <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001342:	e00a      	b.n	800135a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001344:	f7ff fa2a 	bl	800079c <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001352:	4293      	cmp	r3, r2
 8001354:	d901      	bls.n	800135a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e053      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 020c 	and.w	r2, r3, #12
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	429a      	cmp	r2, r3
 800136a:	d1eb      	bne.n	8001344 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800136c:	4b27      	ldr	r3, [pc, #156]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d210      	bcs.n	800139c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 0207 	bic.w	r2, r3, #7
 8001382:	4922      	ldr	r1, [pc, #136]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d001      	beq.n	800139c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e032      	b.n	8001402 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4916      	ldr	r1, [pc, #88]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d009      	beq.n	80013da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	490e      	ldr	r1, [pc, #56]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013da:	f000 f821 	bl	8001420 <HAL_RCC_GetSysClockFreq>
 80013de:	4602      	mov	r2, r0
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	490a      	ldr	r1, [pc, #40]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80013ec:	5ccb      	ldrb	r3, [r1, r3]
 80013ee:	fa22 f303 	lsr.w	r3, r2, r3
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <HAL_RCC_ClockConfig+0x1cc>)
 80013f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_RCC_ClockConfig+0x1d0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f98c 	bl	8000718 <HAL_InitTick>

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000
 8001410:	40021000 	.word	0x40021000
 8001414:	080037b4 	.word	0x080037b4
 8001418:	20000000 	.word	0x20000000
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001420:	b490      	push	{r4, r7}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001426:	4b29      	ldr	r3, [pc, #164]	; (80014cc <HAL_RCC_GetSysClockFreq+0xac>)
 8001428:	1d3c      	adds	r4, r7, #4
 800142a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800142c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001430:	f240 2301 	movw	r3, #513	; 0x201
 8001434:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b04      	cmp	r3, #4
 8001458:	d002      	beq.n	8001460 <HAL_RCC_GetSysClockFreq+0x40>
 800145a:	2b08      	cmp	r3, #8
 800145c:	d003      	beq.n	8001466 <HAL_RCC_GetSysClockFreq+0x46>
 800145e:	e02b      	b.n	80014b8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001462:	623b      	str	r3, [r7, #32]
      break;
 8001464:	e02b      	b.n	80014be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	0c9b      	lsrs	r3, r3, #18
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	3328      	adds	r3, #40	; 0x28
 8001470:	443b      	add	r3, r7
 8001472:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001476:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d012      	beq.n	80014a8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	0c5b      	lsrs	r3, r3, #17
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	3328      	adds	r3, #40	; 0x28
 800148e:	443b      	add	r3, r7
 8001490:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001494:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800149a:	fb03 f202 	mul.w	r2, r3, r2
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
 80014a6:	e004      	b.n	80014b2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	623b      	str	r3, [r7, #32]
      break;
 80014b6:	e002      	b.n	80014be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014ba:	623b      	str	r3, [r7, #32]
      break;
 80014bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014be:	6a3b      	ldr	r3, [r7, #32]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3728      	adds	r7, #40	; 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc90      	pop	{r4, r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	0800379c 	.word	0x0800379c
 80014d0:	40021000 	.word	0x40021000
 80014d4:	007a1200 	.word	0x007a1200
 80014d8:	003d0900 	.word	0x003d0900

080014dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e0:	4b02      	ldr	r3, [pc, #8]	; (80014ec <HAL_RCC_GetHCLKFreq+0x10>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	20000000 	.word	0x20000000

080014f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014f4:	f7ff fff2 	bl	80014dc <HAL_RCC_GetHCLKFreq>
 80014f8:	4602      	mov	r2, r0
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	4903      	ldr	r1, [pc, #12]	; (8001514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001506:	5ccb      	ldrb	r3, [r1, r3]
 8001508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800150c:	4618      	mov	r0, r3
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	080037c4 	.word	0x080037c4

08001518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800151c:	f7ff ffde 	bl	80014dc <HAL_RCC_GetHCLKFreq>
 8001520:	4602      	mov	r2, r0
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	0adb      	lsrs	r3, r3, #11
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	4903      	ldr	r1, [pc, #12]	; (800153c <HAL_RCC_GetPCLK2Freq+0x24>)
 800152e:	5ccb      	ldrb	r3, [r1, r3]
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	080037c4 	.word	0x080037c4

08001540 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <RCC_Delay+0x34>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <RCC_Delay+0x38>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	0a5b      	lsrs	r3, r3, #9
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800155c:	bf00      	nop
  }
  while (Delay --);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1e5a      	subs	r2, r3, #1
 8001562:	60fa      	str	r2, [r7, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f9      	bne.n	800155c <RCC_Delay+0x1c>
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	20000000 	.word	0x20000000
 8001578:	10624dd3 	.word	0x10624dd3

0800157c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e03f      	b.n	800160e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d106      	bne.n	80015a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff f83e 	bl	8000624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2224      	movs	r2, #36	; 0x24
 80015ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f905 	bl	80017d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	695a      	ldr	r2, [r3, #20]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2220      	movs	r2, #32
 8001600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2220      	movs	r2, #32
 8001608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b08a      	sub	sp, #40	; 0x28
 800161a:	af02      	add	r7, sp, #8
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4613      	mov	r3, r2
 8001624:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b20      	cmp	r3, #32
 8001634:	d17c      	bne.n	8001730 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <HAL_UART_Transmit+0x2c>
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e075      	b.n	8001732 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_UART_Transmit+0x3e>
 8001650:	2302      	movs	r3, #2
 8001652:	e06e      	b.n	8001732 <HAL_UART_Transmit+0x11c>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2221      	movs	r2, #33	; 0x21
 8001666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800166a:	f7ff f897 	bl	800079c <HAL_GetTick>
 800166e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	88fa      	ldrh	r2, [r7, #6]
 8001674:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	88fa      	ldrh	r2, [r7, #6]
 800167a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001684:	d108      	bne.n	8001698 <HAL_UART_Transmit+0x82>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d104      	bne.n	8001698 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	e003      	b.n	80016a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80016a8:	e02a      	b.n	8001700 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2200      	movs	r2, #0
 80016b2:	2180      	movs	r1, #128	; 0x80
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 f840 	bl	800173a <UART_WaitOnFlagUntilTimeout>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e036      	b.n	8001732 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10b      	bne.n	80016e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	3302      	adds	r3, #2
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	e007      	b.n	80016f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	781a      	ldrb	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	3301      	adds	r3, #1
 80016f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001704:	b29b      	uxth	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1cf      	bne.n	80016aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2200      	movs	r2, #0
 8001712:	2140      	movs	r1, #64	; 0x40
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f810 	bl	800173a <UART_WaitOnFlagUntilTimeout>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e006      	b.n	8001732 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2220      	movs	r2, #32
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	e000      	b.n	8001732 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001730:	2302      	movs	r3, #2
  }
}
 8001732:	4618      	mov	r0, r3
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	4613      	mov	r3, r2
 8001748:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800174a:	e02c      	b.n	80017a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001752:	d028      	beq.n	80017a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d007      	beq.n	800176a <UART_WaitOnFlagUntilTimeout+0x30>
 800175a:	f7ff f81f 	bl	800079c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	429a      	cmp	r2, r3
 8001768:	d21d      	bcs.n	80017a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001778:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0201 	bic.w	r2, r2, #1
 8001788:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2220      	movs	r2, #32
 800178e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2220      	movs	r2, #32
 8001796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e00f      	b.n	80017c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4013      	ands	r3, r2
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	bf0c      	ite	eq
 80017b6:	2301      	moveq	r3, #1
 80017b8:	2300      	movne	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d0c3      	beq.n	800174c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800180a:	f023 030c 	bic.w	r3, r3, #12
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	430b      	orrs	r3, r1
 8001816:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a2c      	ldr	r2, [pc, #176]	; (80018e4 <UART_SetConfig+0x114>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d103      	bne.n	8001840 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001838:	f7ff fe6e 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	e002      	b.n	8001846 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001840:	f7ff fe56 	bl	80014f0 <HAL_RCC_GetPCLK1Freq>
 8001844:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	009a      	lsls	r2, r3, #2
 8001850:	441a      	add	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	fbb2 f3f3 	udiv	r3, r2, r3
 800185c:	4a22      	ldr	r2, [pc, #136]	; (80018e8 <UART_SetConfig+0x118>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	0119      	lsls	r1, r3, #4
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	009a      	lsls	r2, r3, #2
 8001870:	441a      	add	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	fbb2 f2f3 	udiv	r2, r2, r3
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <UART_SetConfig+0x118>)
 800187e:	fba3 0302 	umull	r0, r3, r3, r2
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	2064      	movs	r0, #100	; 0x64
 8001886:	fb00 f303 	mul.w	r3, r0, r3
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	3332      	adds	r3, #50	; 0x32
 8001890:	4a15      	ldr	r2, [pc, #84]	; (80018e8 <UART_SetConfig+0x118>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800189c:	4419      	add	r1, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	009a      	lsls	r2, r3, #2
 80018a8:	441a      	add	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <UART_SetConfig+0x118>)
 80018b6:	fba3 0302 	umull	r0, r3, r3, r2
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2064      	movs	r0, #100	; 0x64
 80018be:	fb00 f303 	mul.w	r3, r0, r3
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	3332      	adds	r3, #50	; 0x32
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <UART_SetConfig+0x118>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	f003 020f 	and.w	r2, r3, #15
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	440a      	add	r2, r1
 80018da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40013800 	.word	0x40013800
 80018e8:	51eb851f 	.word	0x51eb851f

080018ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80018fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fe:	2b84      	cmp	r3, #132	; 0x84
 8001900:	d005      	beq.n	800190e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001902:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	3303      	adds	r3, #3
 800190c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800191e:	f000 fad1 	bl	8001ec4 <vTaskStartScheduler>
  
  return osOK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}

08001928 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af04      	add	r7, sp, #16
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d020      	beq.n	800197c <osThreadCreate+0x54>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d01c      	beq.n	800197c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685c      	ldr	r4, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681d      	ldr	r5, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691e      	ldr	r6, [r3, #16]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ffc9 	bl	80018ec <makeFreeRtosPriority>
 800195a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001964:	9202      	str	r2, [sp, #8]
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	9100      	str	r1, [sp, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	4632      	mov	r2, r6
 800196e:	4629      	mov	r1, r5
 8001970:	4620      	mov	r0, r4
 8001972:	f000 f8e8 	bl	8001b46 <xTaskCreateStatic>
 8001976:	4603      	mov	r3, r0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	e01c      	b.n	80019b6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685c      	ldr	r4, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001988:	b29e      	uxth	r6, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ffab 	bl	80018ec <makeFreeRtosPriority>
 8001996:	4602      	mov	r2, r0
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	9200      	str	r2, [sp, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4632      	mov	r2, r6
 80019a4:	4629      	mov	r1, r5
 80019a6:	4620      	mov	r0, r4
 80019a8:	f000 f929 	bl	8001bfe <xTaskCreate>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d001      	beq.n	80019b6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e000      	b.n	80019b8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019c0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <osDelay+0x16>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	e000      	b.n	80019d8 <osDelay+0x18>
 80019d6:	2301      	movs	r3, #1
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fa3f 	bl	8001e5c <vTaskDelay>
  
  return osOK;
 80019de:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f103 0208 	add.w	r2, r3, #8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f103 0208 	add.w	r2, r3, #8
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f103 0208 	add.w	r2, r3, #8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	601a      	str	r2, [r3, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9a:	d103      	bne.n	8001aa4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	e00c      	b.n	8001abe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	e002      	b.n	8001ab2 <vListInsert+0x2e>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d2f6      	bcs.n	8001aac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	601a      	str	r2, [r3, #0]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6892      	ldr	r2, [r2, #8]
 8001b0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6852      	ldr	r2, [r2, #4]
 8001b14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d103      	bne.n	8001b28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	1e5a      	subs	r2, r3, #1
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b08e      	sub	sp, #56	; 0x38
 8001b4a:	af04      	add	r7, sp, #16
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10a      	bne.n	8001b70 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5e:	f383 8811 	msr	BASEPRI, r3
 8001b62:	f3bf 8f6f 	isb	sy
 8001b66:	f3bf 8f4f 	dsb	sy
 8001b6a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b6c:	bf00      	nop
 8001b6e:	e7fe      	b.n	8001b6e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10a      	bne.n	8001b8c <xTaskCreateStatic+0x46>
	__asm volatile
 8001b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7a:	f383 8811 	msr	BASEPRI, r3
 8001b7e:	f3bf 8f6f 	isb	sy
 8001b82:	f3bf 8f4f 	dsb	sy
 8001b86:	61fb      	str	r3, [r7, #28]
}
 8001b88:	bf00      	nop
 8001b8a:	e7fe      	b.n	8001b8a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001b8c:	2354      	movs	r3, #84	; 0x54
 8001b8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b54      	cmp	r3, #84	; 0x54
 8001b94:	d00a      	beq.n	8001bac <xTaskCreateStatic+0x66>
	__asm volatile
 8001b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b9a:	f383 8811 	msr	BASEPRI, r3
 8001b9e:	f3bf 8f6f 	isb	sy
 8001ba2:	f3bf 8f4f 	dsb	sy
 8001ba6:	61bb      	str	r3, [r7, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	e7fe      	b.n	8001baa <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d01e      	beq.n	8001bf0 <xTaskCreateStatic+0xaa>
 8001bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01b      	beq.n	8001bf0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9303      	str	r3, [sp, #12]
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f850 	bl	8001c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bea:	f000 f8cd 	bl	8001d88 <prvAddNewTaskToReadyList>
 8001bee:	e001      	b.n	8001bf4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001bf4:	697b      	ldr	r3, [r7, #20]
	}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3728      	adds	r7, #40	; 0x28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b08c      	sub	sp, #48	; 0x30
 8001c02:	af04      	add	r7, sp, #16
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fe8c 	bl	8002930 <pvPortMalloc>
 8001c18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00e      	beq.n	8001c3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001c20:	2054      	movs	r0, #84	; 0x54
 8001c22:	f000 fe85 	bl	8002930 <pvPortMalloc>
 8001c26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
 8001c34:	e005      	b.n	8001c42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f000 ff3e 	bl	8002ab8 <vPortFree>
 8001c3c:	e001      	b.n	8001c42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d017      	beq.n	8001c78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c50:	88fa      	ldrh	r2, [r7, #6]
 8001c52:	2300      	movs	r3, #0
 8001c54:	9303      	str	r3, [sp, #12]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	9302      	str	r3, [sp, #8]
 8001c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f80e 	bl	8001c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c6c:	69f8      	ldr	r0, [r7, #28]
 8001c6e:	f000 f88b 	bl	8001d88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001c72:	2301      	movs	r3, #1
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	e002      	b.n	8001c7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001c7e:	69bb      	ldr	r3, [r7, #24]
	}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3720      	adds	r7, #32
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f023 0307 	bic.w	r3, r3, #7
 8001cae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00a      	beq.n	8001cd0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cbe:	f383 8811 	msr	BASEPRI, r3
 8001cc2:	f3bf 8f6f 	isb	sy
 8001cc6:	f3bf 8f4f 	dsb	sy
 8001cca:	617b      	str	r3, [r7, #20]
}
 8001ccc:	bf00      	nop
 8001cce:	e7fe      	b.n	8001cce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	e012      	b.n	8001cfc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	4413      	add	r3, r2
 8001cdc:	7819      	ldrb	r1, [r3, #0]
 8001cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3334      	adds	r3, #52	; 0x34
 8001ce6:	460a      	mov	r2, r1
 8001ce8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	4413      	add	r3, r2
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	2b0f      	cmp	r3, #15
 8001d00:	d9e9      	bls.n	8001cd6 <prvInitialiseNewTask+0x4e>
 8001d02:	e000      	b.n	8001d06 <prvInitialiseNewTask+0x7e>
		{
			break;
 8001d04:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	2b13      	cmp	r3, #19
 8001d12:	d901      	bls.n	8001d18 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d14:	2313      	movs	r3, #19
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d22:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d26:	2200      	movs	r2, #0
 8001d28:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fe79 	bl	8001a26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d36:	3318      	adds	r3, #24
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fe74 	bl	8001a26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d46:	f1c3 0214 	rsb	r2, r3, #20
 8001d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d56:	2200      	movs	r2, #0
 8001d58:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	68f9      	ldr	r1, [r7, #12]
 8001d66:	69b8      	ldr	r0, [r7, #24]
 8001d68:	f000 fc2c 	bl	80025c4 <pxPortInitialiseStack>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d70:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d7e:	bf00      	nop
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001d90:	f000 fd0c 	bl	80027ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <prvAddNewTaskToReadyList+0xb8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	4a29      	ldr	r2, [pc, #164]	; (8001e40 <prvAddNewTaskToReadyList+0xb8>)
 8001d9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001d9e:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <prvAddNewTaskToReadyList+0xbc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001da6:	4a27      	ldr	r2, [pc, #156]	; (8001e44 <prvAddNewTaskToReadyList+0xbc>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001dac:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <prvAddNewTaskToReadyList+0xb8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d110      	bne.n	8001dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001db4:	f000 fac0 	bl	8002338 <prvInitialiseTaskLists>
 8001db8:	e00d      	b.n	8001dd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001dba:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <prvAddNewTaskToReadyList+0xc0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <prvAddNewTaskToReadyList+0xbc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d802      	bhi.n	8001dd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001dd0:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <prvAddNewTaskToReadyList+0xbc>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <prvAddNewTaskToReadyList+0xc4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <prvAddNewTaskToReadyList+0xc4>)
 8001dde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	2201      	movs	r2, #1
 8001de6:	409a      	lsls	r2, r3
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <prvAddNewTaskToReadyList+0xc8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <prvAddNewTaskToReadyList+0xc8>)
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <prvAddNewTaskToReadyList+0xcc>)
 8001e00:	441a      	add	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3304      	adds	r3, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4610      	mov	r0, r2
 8001e0a:	f7ff fe18 	bl	8001a3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001e0e:	f000 fcfd 	bl	800280c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <prvAddNewTaskToReadyList+0xc0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00e      	beq.n	8001e38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <prvAddNewTaskToReadyList+0xbc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d207      	bcs.n	8001e38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <prvAddNewTaskToReadyList+0xd0>)
 8001e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	f3bf 8f4f 	dsb	sy
 8001e34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000538 	.word	0x20000538
 8001e44:	20000334 	.word	0x20000334
 8001e48:	20000544 	.word	0x20000544
 8001e4c:	20000554 	.word	0x20000554
 8001e50:	20000540 	.word	0x20000540
 8001e54:	20000338 	.word	0x20000338
 8001e58:	e000ed04 	.word	0xe000ed04

08001e5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d017      	beq.n	8001e9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <vTaskDelay+0x60>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00a      	beq.n	8001e8c <vTaskDelay+0x30>
	__asm volatile
 8001e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7a:	f383 8811 	msr	BASEPRI, r3
 8001e7e:	f3bf 8f6f 	isb	sy
 8001e82:	f3bf 8f4f 	dsb	sy
 8001e86:	60bb      	str	r3, [r7, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	e7fe      	b.n	8001e8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001e8c:	f000 f87a 	bl	8001f84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001e90:	2100      	movs	r1, #0
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fb30 	bl	80024f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001e98:	f000 f882 	bl	8001fa0 <xTaskResumeAll>
 8001e9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d107      	bne.n	8001eb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <vTaskDelay+0x64>)
 8001ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	f3bf 8f4f 	dsb	sy
 8001eb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000560 	.word	0x20000560
 8001ec0:	e000ed04 	.word	0xe000ed04

08001ec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001ed2:	463a      	mov	r2, r7
 8001ed4:	1d39      	adds	r1, r7, #4
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe f938 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001ee0:	6839      	ldr	r1, [r7, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	9202      	str	r2, [sp, #8]
 8001ee8:	9301      	str	r3, [sp, #4]
 8001eea:	2300      	movs	r3, #0
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	460a      	mov	r2, r1
 8001ef2:	491e      	ldr	r1, [pc, #120]	; (8001f6c <vTaskStartScheduler+0xa8>)
 8001ef4:	481e      	ldr	r0, [pc, #120]	; (8001f70 <vTaskStartScheduler+0xac>)
 8001ef6:	f7ff fe26 	bl	8001b46 <xTaskCreateStatic>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <vTaskStartScheduler+0xb0>)
 8001efe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001f00:	4b1c      	ldr	r3, [pc, #112]	; (8001f74 <vTaskStartScheduler+0xb0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	e001      	b.n	8001f12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d116      	bne.n	8001f46 <vTaskStartScheduler+0x82>
	__asm volatile
 8001f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1c:	f383 8811 	msr	BASEPRI, r3
 8001f20:	f3bf 8f6f 	isb	sy
 8001f24:	f3bf 8f4f 	dsb	sy
 8001f28:	613b      	str	r3, [r7, #16]
}
 8001f2a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <vTaskStartScheduler+0xb4>)
 8001f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <vTaskStartScheduler+0xb8>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <vTaskStartScheduler+0xbc>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001f40:	f000 fbc2 	bl	80026c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001f44:	e00e      	b.n	8001f64 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d10a      	bne.n	8001f64 <vTaskStartScheduler+0xa0>
	__asm volatile
 8001f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f52:	f383 8811 	msr	BASEPRI, r3
 8001f56:	f3bf 8f6f 	isb	sy
 8001f5a:	f3bf 8f4f 	dsb	sy
 8001f5e:	60fb      	str	r3, [r7, #12]
}
 8001f60:	bf00      	nop
 8001f62:	e7fe      	b.n	8001f62 <vTaskStartScheduler+0x9e>
}
 8001f64:	bf00      	nop
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	080037ac 	.word	0x080037ac
 8001f70:	08002309 	.word	0x08002309
 8001f74:	2000055c 	.word	0x2000055c
 8001f78:	20000558 	.word	0x20000558
 8001f7c:	20000544 	.word	0x20000544
 8001f80:	2000053c 	.word	0x2000053c

08001f84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <vTaskSuspendAll+0x18>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	4a03      	ldr	r2, [pc, #12]	; (8001f9c <vTaskSuspendAll+0x18>)
 8001f90:	6013      	str	r3, [r2, #0]
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000560 	.word	0x20000560

08001fa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001fae:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <xTaskResumeAll+0x114>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10a      	bne.n	8001fcc <xTaskResumeAll+0x2c>
	__asm volatile
 8001fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fba:	f383 8811 	msr	BASEPRI, r3
 8001fbe:	f3bf 8f6f 	isb	sy
 8001fc2:	f3bf 8f4f 	dsb	sy
 8001fc6:	603b      	str	r3, [r7, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	e7fe      	b.n	8001fca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001fcc:	f000 fbee 	bl	80027ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001fd0:	4b38      	ldr	r3, [pc, #224]	; (80020b4 <xTaskResumeAll+0x114>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	4a37      	ldr	r2, [pc, #220]	; (80020b4 <xTaskResumeAll+0x114>)
 8001fd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fda:	4b36      	ldr	r3, [pc, #216]	; (80020b4 <xTaskResumeAll+0x114>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d161      	bne.n	80020a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001fe2:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <xTaskResumeAll+0x118>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d05d      	beq.n	80020a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001fea:	e02e      	b.n	800204a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001fec:	4b33      	ldr	r3, [pc, #204]	; (80020bc <xTaskResumeAll+0x11c>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3318      	adds	r3, #24
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fd7b 	bl	8001af4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3304      	adds	r3, #4
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fd76 	bl	8001af4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	2201      	movs	r2, #1
 800200e:	409a      	lsls	r2, r3
 8002010:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <xTaskResumeAll+0x120>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4313      	orrs	r3, r2
 8002016:	4a2a      	ldr	r2, [pc, #168]	; (80020c0 <xTaskResumeAll+0x120>)
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4a27      	ldr	r2, [pc, #156]	; (80020c4 <xTaskResumeAll+0x124>)
 8002028:	441a      	add	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3304      	adds	r3, #4
 800202e:	4619      	mov	r1, r3
 8002030:	4610      	mov	r0, r2
 8002032:	f7ff fd04 	bl	8001a3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203a:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <xTaskResumeAll+0x128>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	429a      	cmp	r2, r3
 8002042:	d302      	bcc.n	800204a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002044:	4b21      	ldr	r3, [pc, #132]	; (80020cc <xTaskResumeAll+0x12c>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <xTaskResumeAll+0x11c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1cc      	bne.n	8001fec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002058:	f000 fa0c 	bl	8002474 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800205c:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <xTaskResumeAll+0x130>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d010      	beq.n	800208a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002068:	f000 f836 	bl	80020d8 <xTaskIncrementTick>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <xTaskResumeAll+0x12c>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f1      	bne.n	8002068 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <xTaskResumeAll+0x130>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <xTaskResumeAll+0x12c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002092:	2301      	movs	r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <xTaskResumeAll+0x134>)
 8002098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	f3bf 8f4f 	dsb	sy
 80020a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80020a6:	f000 fbb1 	bl	800280c <vPortExitCritical>

	return xAlreadyYielded;
 80020aa:	68bb      	ldr	r3, [r7, #8]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000560 	.word	0x20000560
 80020b8:	20000538 	.word	0x20000538
 80020bc:	200004f8 	.word	0x200004f8
 80020c0:	20000540 	.word	0x20000540
 80020c4:	20000338 	.word	0x20000338
 80020c8:	20000334 	.word	0x20000334
 80020cc:	2000054c 	.word	0x2000054c
 80020d0:	20000548 	.word	0x20000548
 80020d4:	e000ed04 	.word	0xe000ed04

080020d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020e2:	4b51      	ldr	r3, [pc, #324]	; (8002228 <xTaskIncrementTick+0x150>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 808d 	bne.w	8002206 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80020ec:	4b4f      	ldr	r3, [pc, #316]	; (800222c <xTaskIncrementTick+0x154>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80020f4:	4a4d      	ldr	r2, [pc, #308]	; (800222c <xTaskIncrementTick+0x154>)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d120      	bne.n	8002142 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002100:	4b4b      	ldr	r3, [pc, #300]	; (8002230 <xTaskIncrementTick+0x158>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <xTaskIncrementTick+0x48>
	__asm volatile
 800210a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210e:	f383 8811 	msr	BASEPRI, r3
 8002112:	f3bf 8f6f 	isb	sy
 8002116:	f3bf 8f4f 	dsb	sy
 800211a:	603b      	str	r3, [r7, #0]
}
 800211c:	bf00      	nop
 800211e:	e7fe      	b.n	800211e <xTaskIncrementTick+0x46>
 8002120:	4b43      	ldr	r3, [pc, #268]	; (8002230 <xTaskIncrementTick+0x158>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b43      	ldr	r3, [pc, #268]	; (8002234 <xTaskIncrementTick+0x15c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a41      	ldr	r2, [pc, #260]	; (8002230 <xTaskIncrementTick+0x158>)
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4a41      	ldr	r2, [pc, #260]	; (8002234 <xTaskIncrementTick+0x15c>)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b40      	ldr	r3, [pc, #256]	; (8002238 <xTaskIncrementTick+0x160>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	4a3f      	ldr	r2, [pc, #252]	; (8002238 <xTaskIncrementTick+0x160>)
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	f000 f999 	bl	8002474 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002142:	4b3e      	ldr	r3, [pc, #248]	; (800223c <xTaskIncrementTick+0x164>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	429a      	cmp	r2, r3
 800214a:	d34d      	bcc.n	80021e8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800214c:	4b38      	ldr	r3, [pc, #224]	; (8002230 <xTaskIncrementTick+0x158>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <xTaskIncrementTick+0x82>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <xTaskIncrementTick+0x84>
 800215a:	2300      	movs	r3, #0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <xTaskIncrementTick+0x164>)
 8002162:	f04f 32ff 	mov.w	r2, #4294967295
 8002166:	601a      	str	r2, [r3, #0]
					break;
 8002168:	e03e      	b.n	80021e8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800216a:	4b31      	ldr	r3, [pc, #196]	; (8002230 <xTaskIncrementTick+0x158>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	d203      	bcs.n	800218a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002182:	4a2e      	ldr	r2, [pc, #184]	; (800223c <xTaskIncrementTick+0x164>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6013      	str	r3, [r2, #0]
						break;
 8002188:	e02e      	b.n	80021e8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3304      	adds	r3, #4
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fcb0 	bl	8001af4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	3318      	adds	r3, #24
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fca7 	bl	8001af4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	2201      	movs	r2, #1
 80021ac:	409a      	lsls	r2, r3
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <xTaskIncrementTick+0x168>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	4a22      	ldr	r2, [pc, #136]	; (8002240 <xTaskIncrementTick+0x168>)
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4a1f      	ldr	r2, [pc, #124]	; (8002244 <xTaskIncrementTick+0x16c>)
 80021c6:	441a      	add	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	3304      	adds	r3, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4610      	mov	r0, r2
 80021d0:	f7ff fc35 	bl	8001a3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <xTaskIncrementTick+0x170>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	429a      	cmp	r2, r3
 80021e0:	d3b4      	bcc.n	800214c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80021e2:	2301      	movs	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021e6:	e7b1      	b.n	800214c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <xTaskIncrementTick+0x170>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ee:	4915      	ldr	r1, [pc, #84]	; (8002244 <xTaskIncrementTick+0x16c>)
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d907      	bls.n	8002210 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002200:	2301      	movs	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	e004      	b.n	8002210 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <xTaskIncrementTick+0x174>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3301      	adds	r3, #1
 800220c:	4a0f      	ldr	r2, [pc, #60]	; (800224c <xTaskIncrementTick+0x174>)
 800220e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <xTaskIncrementTick+0x178>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002218:	2301      	movs	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800221c:	697b      	ldr	r3, [r7, #20]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000560 	.word	0x20000560
 800222c:	2000053c 	.word	0x2000053c
 8002230:	200004f0 	.word	0x200004f0
 8002234:	200004f4 	.word	0x200004f4
 8002238:	20000550 	.word	0x20000550
 800223c:	20000558 	.word	0x20000558
 8002240:	20000540 	.word	0x20000540
 8002244:	20000338 	.word	0x20000338
 8002248:	20000334 	.word	0x20000334
 800224c:	20000548 	.word	0x20000548
 8002250:	2000054c 	.word	0x2000054c

08002254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <vTaskSwitchContext+0xa0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002262:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <vTaskSwitchContext+0xa4>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002268:	e03f      	b.n	80022ea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <vTaskSwitchContext+0xa4>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002270:	4b22      	ldr	r3, [pc, #136]	; (80022fc <vTaskSwitchContext+0xa8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800227e:	7afb      	ldrb	r3, [r7, #11]
 8002280:	f1c3 031f 	rsb	r3, r3, #31
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	491e      	ldr	r1, [pc, #120]	; (8002300 <vTaskSwitchContext+0xac>)
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10a      	bne.n	80022b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800229a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229e:	f383 8811 	msr	BASEPRI, r3
 80022a2:	f3bf 8f6f 	isb	sy
 80022a6:	f3bf 8f4f 	dsb	sy
 80022aa:	607b      	str	r3, [r7, #4]
}
 80022ac:	bf00      	nop
 80022ae:	e7fe      	b.n	80022ae <vTaskSwitchContext+0x5a>
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4a11      	ldr	r2, [pc, #68]	; (8002300 <vTaskSwitchContext+0xac>)
 80022bc:	4413      	add	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	3308      	adds	r3, #8
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d104      	bne.n	80022e0 <vTaskSwitchContext+0x8c>
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	4a07      	ldr	r2, [pc, #28]	; (8002304 <vTaskSwitchContext+0xb0>)
 80022e8:	6013      	str	r3, [r2, #0]
}
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000560 	.word	0x20000560
 80022f8:	2000054c 	.word	0x2000054c
 80022fc:	20000540 	.word	0x20000540
 8002300:	20000338 	.word	0x20000338
 8002304:	20000334 	.word	0x20000334

08002308 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002310:	f000 f852 	bl	80023b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <prvIdleTask+0x28>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d9f9      	bls.n	8002310 <prvIdleTask+0x8>
			{
				taskYIELD();
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <prvIdleTask+0x2c>)
 800231e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800232c:	e7f0      	b.n	8002310 <prvIdleTask+0x8>
 800232e:	bf00      	nop
 8002330:	20000338 	.word	0x20000338
 8002334:	e000ed04 	.word	0xe000ed04

08002338 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	e00c      	b.n	800235e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <prvInitialiseTaskLists+0x60>)
 8002350:	4413      	add	r3, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fb48 	bl	80019e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3301      	adds	r3, #1
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b13      	cmp	r3, #19
 8002362:	d9ef      	bls.n	8002344 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002364:	480d      	ldr	r0, [pc, #52]	; (800239c <prvInitialiseTaskLists+0x64>)
 8002366:	f7ff fb3f 	bl	80019e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800236a:	480d      	ldr	r0, [pc, #52]	; (80023a0 <prvInitialiseTaskLists+0x68>)
 800236c:	f7ff fb3c 	bl	80019e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002370:	480c      	ldr	r0, [pc, #48]	; (80023a4 <prvInitialiseTaskLists+0x6c>)
 8002372:	f7ff fb39 	bl	80019e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002376:	480c      	ldr	r0, [pc, #48]	; (80023a8 <prvInitialiseTaskLists+0x70>)
 8002378:	f7ff fb36 	bl	80019e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800237c:	480b      	ldr	r0, [pc, #44]	; (80023ac <prvInitialiseTaskLists+0x74>)
 800237e:	f7ff fb33 	bl	80019e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <prvInitialiseTaskLists+0x78>)
 8002384:	4a05      	ldr	r2, [pc, #20]	; (800239c <prvInitialiseTaskLists+0x64>)
 8002386:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <prvInitialiseTaskLists+0x7c>)
 800238a:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <prvInitialiseTaskLists+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000338 	.word	0x20000338
 800239c:	200004c8 	.word	0x200004c8
 80023a0:	200004dc 	.word	0x200004dc
 80023a4:	200004f8 	.word	0x200004f8
 80023a8:	2000050c 	.word	0x2000050c
 80023ac:	20000524 	.word	0x20000524
 80023b0:	200004f0 	.word	0x200004f0
 80023b4:	200004f4 	.word	0x200004f4

080023b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80023be:	e019      	b.n	80023f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80023c0:	f000 f9f4 	bl	80027ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <prvCheckTasksWaitingTermination+0x50>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3304      	adds	r3, #4
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fb8f 	bl	8001af4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <prvCheckTasksWaitingTermination+0x54>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3b01      	subs	r3, #1
 80023dc:	4a0b      	ldr	r2, [pc, #44]	; (800240c <prvCheckTasksWaitingTermination+0x54>)
 80023de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <prvCheckTasksWaitingTermination+0x58>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <prvCheckTasksWaitingTermination+0x58>)
 80023e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80023ea:	f000 fa0f 	bl	800280c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f810 	bl	8002414 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <prvCheckTasksWaitingTermination+0x58>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e1      	bne.n	80023c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2000050c 	.word	0x2000050c
 800240c:	20000538 	.word	0x20000538
 8002410:	20000520 	.word	0x20000520

08002414 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002422:	2b00      	cmp	r3, #0
 8002424:	d108      	bne.n	8002438 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fb44 	bl	8002ab8 <vPortFree>
				vPortFree( pxTCB );
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fb41 	bl	8002ab8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002436:	e018      	b.n	800246a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800243e:	2b01      	cmp	r3, #1
 8002440:	d103      	bne.n	800244a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fb38 	bl	8002ab8 <vPortFree>
	}
 8002448:	e00f      	b.n	800246a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002450:	2b02      	cmp	r3, #2
 8002452:	d00a      	beq.n	800246a <prvDeleteTCB+0x56>
	__asm volatile
 8002454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002458:	f383 8811 	msr	BASEPRI, r3
 800245c:	f3bf 8f6f 	isb	sy
 8002460:	f3bf 8f4f 	dsb	sy
 8002464:	60fb      	str	r3, [r7, #12]
}
 8002466:	bf00      	nop
 8002468:	e7fe      	b.n	8002468 <prvDeleteTCB+0x54>
	}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <prvResetNextTaskUnblockTime+0x40>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <prvResetNextTaskUnblockTime+0x14>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <prvResetNextTaskUnblockTime+0x16>
 8002488:	2300      	movs	r3, #0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d004      	beq.n	8002498 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <prvResetNextTaskUnblockTime+0x44>)
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002496:	e008      	b.n	80024aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <prvResetNextTaskUnblockTime+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <prvResetNextTaskUnblockTime+0x44>)
 80024a8:	6013      	str	r3, [r2, #0]
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	200004f0 	.word	0x200004f0
 80024b8:	20000558 	.word	0x20000558

080024bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <xTaskGetSchedulerState+0x34>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80024ca:	2301      	movs	r3, #1
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	e008      	b.n	80024e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <xTaskGetSchedulerState+0x38>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80024d8:	2302      	movs	r3, #2
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	e001      	b.n	80024e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80024e2:	687b      	ldr	r3, [r7, #4]
	}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000544 	.word	0x20000544
 80024f4:	20000560 	.word	0x20000560

080024f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002502:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002508:	4b28      	ldr	r3, [pc, #160]	; (80025ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3304      	adds	r3, #4
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff faf0 	bl	8001af4 <uxListRemove>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10b      	bne.n	8002532 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800251a:	4b24      	ldr	r3, [pc, #144]	; (80025ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	2201      	movs	r2, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4013      	ands	r3, r2
 800252e:	4a20      	ldr	r2, [pc, #128]	; (80025b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002530:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d10a      	bne.n	8002550 <prvAddCurrentTaskToDelayedList+0x58>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	3304      	adds	r3, #4
 8002546:	4619      	mov	r1, r3
 8002548:	481a      	ldr	r0, [pc, #104]	; (80025b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800254a:	f7ff fa78 	bl	8001a3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800254e:	e026      	b.n	800259e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	d209      	bcs.n	800257c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3304      	adds	r3, #4
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f7ff fa85 	bl	8001a84 <vListInsert>
}
 800257a:	e010      	b.n	800259e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	3304      	adds	r3, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4610      	mov	r0, r2
 800258a:	f7ff fa7b 	bl	8001a84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	429a      	cmp	r2, r3
 8002596:	d202      	bcs.n	800259e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002598:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	6013      	str	r3, [r2, #0]
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	2000053c 	.word	0x2000053c
 80025ac:	20000334 	.word	0x20000334
 80025b0:	20000540 	.word	0x20000540
 80025b4:	20000524 	.word	0x20000524
 80025b8:	200004f4 	.word	0x200004f4
 80025bc:	200004f0 	.word	0x200004f0
 80025c0:	20000558 	.word	0x20000558

080025c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	3b04      	subs	r3, #4
 80025d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3b04      	subs	r3, #4
 80025e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f023 0201 	bic.w	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3b04      	subs	r3, #4
 80025f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80025f4:	4a08      	ldr	r2, [pc, #32]	; (8002618 <pxPortInitialiseStack+0x54>)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3b14      	subs	r3, #20
 80025fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3b20      	subs	r3, #32
 800260a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800260c:	68fb      	ldr	r3, [r7, #12]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	0800261d 	.word	0x0800261d

0800261c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <prvTaskExitError+0x54>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262e:	d00a      	beq.n	8002646 <prvTaskExitError+0x2a>
	__asm volatile
 8002630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	60fb      	str	r3, [r7, #12]
}
 8002642:	bf00      	nop
 8002644:	e7fe      	b.n	8002644 <prvTaskExitError+0x28>
	__asm volatile
 8002646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	60bb      	str	r3, [r7, #8]
}
 8002658:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800265a:	bf00      	nop
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0fc      	beq.n	800265c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	2000000c 	.word	0x2000000c
	...

08002680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <pxCurrentTCBConst2>)
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	6808      	ldr	r0, [r1, #0]
 8002686:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800268a:	f380 8809 	msr	PSP, r0
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f04f 0000 	mov.w	r0, #0
 8002696:	f380 8811 	msr	BASEPRI, r0
 800269a:	f04e 0e0d 	orr.w	lr, lr, #13
 800269e:	4770      	bx	lr

080026a0 <pxCurrentTCBConst2>:
 80026a0:	20000334 	.word	0x20000334
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop

080026a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80026a8:	4806      	ldr	r0, [pc, #24]	; (80026c4 <prvPortStartFirstTask+0x1c>)
 80026aa:	6800      	ldr	r0, [r0, #0]
 80026ac:	6800      	ldr	r0, [r0, #0]
 80026ae:	f380 8808 	msr	MSP, r0
 80026b2:	b662      	cpsie	i
 80026b4:	b661      	cpsie	f
 80026b6:	f3bf 8f4f 	dsb	sy
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	df00      	svc	0
 80026c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80026c2:	bf00      	nop
 80026c4:	e000ed08 	.word	0xe000ed08

080026c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80026ce:	4b32      	ldr	r3, [pc, #200]	; (8002798 <xPortStartScheduler+0xd0>)
 80026d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	22ff      	movs	r2, #255	; 0xff
 80026de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <xPortStartScheduler+0xd4>)
 80026f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026f6:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <xPortStartScheduler+0xd8>)
 80026f8:	2207      	movs	r2, #7
 80026fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026fc:	e009      	b.n	8002712 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80026fe:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <xPortStartScheduler+0xd8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3b01      	subs	r3, #1
 8002704:	4a26      	ldr	r2, [pc, #152]	; (80027a0 <xPortStartScheduler+0xd8>)
 8002706:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b80      	cmp	r3, #128	; 0x80
 800271c:	d0ef      	beq.n	80026fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <xPortStartScheduler+0xd8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f1c3 0307 	rsb	r3, r3, #7
 8002726:	2b04      	cmp	r3, #4
 8002728:	d00a      	beq.n	8002740 <xPortStartScheduler+0x78>
	__asm volatile
 800272a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272e:	f383 8811 	msr	BASEPRI, r3
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	60bb      	str	r3, [r7, #8]
}
 800273c:	bf00      	nop
 800273e:	e7fe      	b.n	800273e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002740:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <xPortStartScheduler+0xd8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	4a16      	ldr	r2, [pc, #88]	; (80027a0 <xPortStartScheduler+0xd8>)
 8002748:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <xPortStartScheduler+0xd8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002752:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <xPortStartScheduler+0xd8>)
 8002754:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <xPortStartScheduler+0xdc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a10      	ldr	r2, [pc, #64]	; (80027a4 <xPortStartScheduler+0xdc>)
 8002764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002768:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <xPortStartScheduler+0xdc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <xPortStartScheduler+0xdc>)
 8002770:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002774:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002776:	f000 f8b9 	bl	80028ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <xPortStartScheduler+0xe0>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002780:	f7ff ff92 	bl	80026a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002784:	f7ff fd66 	bl	8002254 <vTaskSwitchContext>
	prvTaskExitError();
 8002788:	f7ff ff48 	bl	800261c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	e000e400 	.word	0xe000e400
 800279c:	20000564 	.word	0x20000564
 80027a0:	20000568 	.word	0x20000568
 80027a4:	e000ed20 	.word	0xe000ed20
 80027a8:	2000000c 	.word	0x2000000c

080027ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
	__asm volatile
 80027b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b6:	f383 8811 	msr	BASEPRI, r3
 80027ba:	f3bf 8f6f 	isb	sy
 80027be:	f3bf 8f4f 	dsb	sy
 80027c2:	607b      	str	r3, [r7, #4]
}
 80027c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <vPortEnterCritical+0x58>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <vPortEnterCritical+0x58>)
 80027ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <vPortEnterCritical+0x58>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d10f      	bne.n	80027f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <vPortEnterCritical+0x5c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80027e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e6:	f383 8811 	msr	BASEPRI, r3
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	603b      	str	r3, [r7, #0]
}
 80027f4:	bf00      	nop
 80027f6:	e7fe      	b.n	80027f6 <vPortEnterCritical+0x4a>
	}
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	2000000c 	.word	0x2000000c
 8002808:	e000ed04 	.word	0xe000ed04

0800280c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <vPortExitCritical+0x4c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10a      	bne.n	8002830 <vPortExitCritical+0x24>
	__asm volatile
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	607b      	str	r3, [r7, #4]
}
 800282c:	bf00      	nop
 800282e:	e7fe      	b.n	800282e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002830:	4b09      	ldr	r3, [pc, #36]	; (8002858 <vPortExitCritical+0x4c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3b01      	subs	r3, #1
 8002836:	4a08      	ldr	r2, [pc, #32]	; (8002858 <vPortExitCritical+0x4c>)
 8002838:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <vPortExitCritical+0x4c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d105      	bne.n	800284e <vPortExitCritical+0x42>
 8002842:	2300      	movs	r3, #0
 8002844:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800284c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	2000000c 	.word	0x2000000c
 800285c:	00000000 	.word	0x00000000

08002860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002860:	f3ef 8009 	mrs	r0, PSP
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <pxCurrentTCBConst>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002870:	6010      	str	r0, [r2, #0]
 8002872:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002876:	f04f 0050 	mov.w	r0, #80	; 0x50
 800287a:	f380 8811 	msr	BASEPRI, r0
 800287e:	f7ff fce9 	bl	8002254 <vTaskSwitchContext>
 8002882:	f04f 0000 	mov.w	r0, #0
 8002886:	f380 8811 	msr	BASEPRI, r0
 800288a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800288e:	6819      	ldr	r1, [r3, #0]
 8002890:	6808      	ldr	r0, [r1, #0]
 8002892:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002896:	f380 8809 	msr	PSP, r0
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	4770      	bx	lr

080028a0 <pxCurrentTCBConst>:
 80028a0:	20000334 	.word	0x20000334
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop

080028a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
	__asm volatile
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	607b      	str	r3, [r7, #4]
}
 80028c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80028c2:	f7ff fc09 	bl	80020d8 <xTaskIncrementTick>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <xPortSysTickHandler+0x40>)
 80028ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	2300      	movs	r3, #0
 80028d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f383 8811 	msr	BASEPRI, r3
}
 80028de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	e000ed04 	.word	0xe000ed04

080028ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80028f0:	4b0a      	ldr	r3, [pc, #40]	; (800291c <vPortSetupTimerInterrupt+0x30>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <vPortSetupTimerInterrupt+0x34>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <vPortSetupTimerInterrupt+0x38>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a09      	ldr	r2, [pc, #36]	; (8002928 <vPortSetupTimerInterrupt+0x3c>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	4a08      	ldr	r2, [pc, #32]	; (800292c <vPortSetupTimerInterrupt+0x40>)
 800290a:	3b01      	subs	r3, #1
 800290c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800290e:	4b03      	ldr	r3, [pc, #12]	; (800291c <vPortSetupTimerInterrupt+0x30>)
 8002910:	2207      	movs	r2, #7
 8002912:	601a      	str	r2, [r3, #0]
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	e000e010 	.word	0xe000e010
 8002920:	e000e018 	.word	0xe000e018
 8002924:	20000000 	.word	0x20000000
 8002928:	10624dd3 	.word	0x10624dd3
 800292c:	e000e014 	.word	0xe000e014

08002930 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	; 0x28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800293c:	f7ff fb22 	bl	8001f84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002940:	4b58      	ldr	r3, [pc, #352]	; (8002aa4 <pvPortMalloc+0x174>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002948:	f000 f910 	bl	8002b6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800294c:	4b56      	ldr	r3, [pc, #344]	; (8002aa8 <pvPortMalloc+0x178>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	f040 808e 	bne.w	8002a76 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01d      	beq.n	800299c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002960:	2208      	movs	r2, #8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	2b00      	cmp	r3, #0
 8002970:	d014      	beq.n	800299c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f023 0307 	bic.w	r3, r3, #7
 8002978:	3308      	adds	r3, #8
 800297a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <pvPortMalloc+0x6c>
	__asm volatile
 8002986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	617b      	str	r3, [r7, #20]
}
 8002998:	bf00      	nop
 800299a:	e7fe      	b.n	800299a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d069      	beq.n	8002a76 <pvPortMalloc+0x146>
 80029a2:	4b42      	ldr	r3, [pc, #264]	; (8002aac <pvPortMalloc+0x17c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d864      	bhi.n	8002a76 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80029ac:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <pvPortMalloc+0x180>)
 80029ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80029b0:	4b3f      	ldr	r3, [pc, #252]	; (8002ab0 <pvPortMalloc+0x180>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029b6:	e004      	b.n	80029c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d903      	bls.n	80029d4 <pvPortMalloc+0xa4>
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f1      	bne.n	80029b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80029d4:	4b33      	ldr	r3, [pc, #204]	; (8002aa4 <pvPortMalloc+0x174>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029da:	429a      	cmp	r2, r3
 80029dc:	d04b      	beq.n	8002a76 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2208      	movs	r2, #8
 80029e4:	4413      	add	r3, r2
 80029e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	1ad2      	subs	r2, r2, r3
 80029f8:	2308      	movs	r3, #8
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d91f      	bls.n	8002a40 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <pvPortMalloc+0xf8>
	__asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	613b      	str	r3, [r7, #16]
}
 8002a24:	bf00      	nop
 8002a26:	e7fe      	b.n	8002a26 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	1ad2      	subs	r2, r2, r3
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a3a:	69b8      	ldr	r0, [r7, #24]
 8002a3c:	f000 f8f8 	bl	8002c30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <pvPortMalloc+0x17c>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	4a18      	ldr	r2, [pc, #96]	; (8002aac <pvPortMalloc+0x17c>)
 8002a4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <pvPortMalloc+0x17c>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <pvPortMalloc+0x184>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d203      	bcs.n	8002a62 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <pvPortMalloc+0x17c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <pvPortMalloc+0x184>)
 8002a60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <pvPortMalloc+0x178>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002a76:	f7ff fa93 	bl	8001fa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <pvPortMalloc+0x16a>
	__asm volatile
 8002a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	60fb      	str	r3, [r7, #12]
}
 8002a96:	bf00      	nop
 8002a98:	e7fe      	b.n	8002a98 <pvPortMalloc+0x168>
	return pvReturn;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3728      	adds	r7, #40	; 0x28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20001174 	.word	0x20001174
 8002aa8:	20001180 	.word	0x20001180
 8002aac:	20001178 	.word	0x20001178
 8002ab0:	2000116c 	.word	0x2000116c
 8002ab4:	2000117c 	.word	0x2000117c

08002ab8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d048      	beq.n	8002b5c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002aca:	2308      	movs	r3, #8
 8002acc:	425b      	negs	r3, r3
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <vPortFree+0xac>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <vPortFree+0x44>
	__asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	60fb      	str	r3, [r7, #12]
}
 8002af8:	bf00      	nop
 8002afa:	e7fe      	b.n	8002afa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <vPortFree+0x62>
	__asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	60bb      	str	r3, [r7, #8]
}
 8002b16:	bf00      	nop
 8002b18:	e7fe      	b.n	8002b18 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <vPortFree+0xac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d019      	beq.n	8002b5c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d115      	bne.n	8002b5c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <vPortFree+0xac>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002b40:	f7ff fa20 	bl	8001f84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <vPortFree+0xb0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <vPortFree+0xb0>)
 8002b50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b52:	6938      	ldr	r0, [r7, #16]
 8002b54:	f000 f86c 	bl	8002c30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002b58:	f7ff fa22 	bl	8001fa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20001180 	.word	0x20001180
 8002b68:	20001178 	.word	0x20001178

08002b6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002b78:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <prvHeapInit+0xac>)
 8002b7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00c      	beq.n	8002ba0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3307      	adds	r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0307 	bic.w	r3, r3, #7
 8002b92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	4a1f      	ldr	r2, [pc, #124]	; (8002c18 <prvHeapInit+0xac>)
 8002b9c:	4413      	add	r3, r2
 8002b9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ba4:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <prvHeapInit+0xb0>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <prvHeapInit+0xb0>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002bb8:	2208      	movs	r2, #8
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0307 	bic.w	r3, r3, #7
 8002bc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4a15      	ldr	r2, [pc, #84]	; (8002c20 <prvHeapInit+0xb4>)
 8002bcc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <prvHeapInit+0xb4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <prvHeapInit+0xb4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	1ad2      	subs	r2, r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <prvHeapInit+0xb4>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <prvHeapInit+0xb8>)
 8002bfa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <prvHeapInit+0xbc>)
 8002c02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c04:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <prvHeapInit+0xc0>)
 8002c06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c0a:	601a      	str	r2, [r3, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	2000056c 	.word	0x2000056c
 8002c1c:	2000116c 	.word	0x2000116c
 8002c20:	20001174 	.word	0x20001174
 8002c24:	2000117c 	.word	0x2000117c
 8002c28:	20001178 	.word	0x20001178
 8002c2c:	20001180 	.word	0x20001180

08002c30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c38:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <prvInsertBlockIntoFreeList+0xa8>)
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e002      	b.n	8002c44 <prvInsertBlockIntoFreeList+0x14>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d8f7      	bhi.n	8002c3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4413      	add	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d108      	bne.n	8002c72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	441a      	add	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	441a      	add	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d118      	bne.n	8002cb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <prvInsertBlockIntoFreeList+0xac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d00d      	beq.n	8002cae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	441a      	add	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	e008      	b.n	8002cc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002cae:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <prvInsertBlockIntoFreeList+0xac>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e003      	b.n	8002cc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d002      	beq.n	8002cce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	2000116c 	.word	0x2000116c
 8002cdc:	20001174 	.word	0x20001174

08002ce0 <__errno>:
 8002ce0:	4b01      	ldr	r3, [pc, #4]	; (8002ce8 <__errno+0x8>)
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000010 	.word	0x20000010

08002cec <__libc_init_array>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	2600      	movs	r6, #0
 8002cf0:	4d0c      	ldr	r5, [pc, #48]	; (8002d24 <__libc_init_array+0x38>)
 8002cf2:	4c0d      	ldr	r4, [pc, #52]	; (8002d28 <__libc_init_array+0x3c>)
 8002cf4:	1b64      	subs	r4, r4, r5
 8002cf6:	10a4      	asrs	r4, r4, #2
 8002cf8:	42a6      	cmp	r6, r4
 8002cfa:	d109      	bne.n	8002d10 <__libc_init_array+0x24>
 8002cfc:	f000 fd18 	bl	8003730 <_init>
 8002d00:	2600      	movs	r6, #0
 8002d02:	4d0a      	ldr	r5, [pc, #40]	; (8002d2c <__libc_init_array+0x40>)
 8002d04:	4c0a      	ldr	r4, [pc, #40]	; (8002d30 <__libc_init_array+0x44>)
 8002d06:	1b64      	subs	r4, r4, r5
 8002d08:	10a4      	asrs	r4, r4, #2
 8002d0a:	42a6      	cmp	r6, r4
 8002d0c:	d105      	bne.n	8002d1a <__libc_init_array+0x2e>
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}
 8002d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d14:	4798      	blx	r3
 8002d16:	3601      	adds	r6, #1
 8002d18:	e7ee      	b.n	8002cf8 <__libc_init_array+0xc>
 8002d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d1e:	4798      	blx	r3
 8002d20:	3601      	adds	r6, #1
 8002d22:	e7f2      	b.n	8002d0a <__libc_init_array+0x1e>
 8002d24:	08003830 	.word	0x08003830
 8002d28:	08003830 	.word	0x08003830
 8002d2c:	08003830 	.word	0x08003830
 8002d30:	08003834 	.word	0x08003834

08002d34 <memset>:
 8002d34:	4603      	mov	r3, r0
 8002d36:	4402      	add	r2, r0
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d100      	bne.n	8002d3e <memset+0xa>
 8002d3c:	4770      	bx	lr
 8002d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d42:	e7f9      	b.n	8002d38 <memset+0x4>

08002d44 <_puts_r>:
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	460e      	mov	r6, r1
 8002d48:	4605      	mov	r5, r0
 8002d4a:	b118      	cbz	r0, 8002d54 <_puts_r+0x10>
 8002d4c:	6983      	ldr	r3, [r0, #24]
 8002d4e:	b90b      	cbnz	r3, 8002d54 <_puts_r+0x10>
 8002d50:	f000 fa44 	bl	80031dc <__sinit>
 8002d54:	69ab      	ldr	r3, [r5, #24]
 8002d56:	68ac      	ldr	r4, [r5, #8]
 8002d58:	b913      	cbnz	r3, 8002d60 <_puts_r+0x1c>
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	f000 fa3e 	bl	80031dc <__sinit>
 8002d60:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <_puts_r+0xd0>)
 8002d62:	429c      	cmp	r4, r3
 8002d64:	d120      	bne.n	8002da8 <_puts_r+0x64>
 8002d66:	686c      	ldr	r4, [r5, #4]
 8002d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d6a:	07db      	lsls	r3, r3, #31
 8002d6c:	d405      	bmi.n	8002d7a <_puts_r+0x36>
 8002d6e:	89a3      	ldrh	r3, [r4, #12]
 8002d70:	0598      	lsls	r0, r3, #22
 8002d72:	d402      	bmi.n	8002d7a <_puts_r+0x36>
 8002d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d76:	f000 facf 	bl	8003318 <__retarget_lock_acquire_recursive>
 8002d7a:	89a3      	ldrh	r3, [r4, #12]
 8002d7c:	0719      	lsls	r1, r3, #28
 8002d7e:	d51d      	bpl.n	8002dbc <_puts_r+0x78>
 8002d80:	6923      	ldr	r3, [r4, #16]
 8002d82:	b1db      	cbz	r3, 8002dbc <_puts_r+0x78>
 8002d84:	3e01      	subs	r6, #1
 8002d86:	68a3      	ldr	r3, [r4, #8]
 8002d88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	60a3      	str	r3, [r4, #8]
 8002d90:	bb39      	cbnz	r1, 8002de2 <_puts_r+0x9e>
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da38      	bge.n	8002e08 <_puts_r+0xc4>
 8002d96:	4622      	mov	r2, r4
 8002d98:	210a      	movs	r1, #10
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	f000 f848 	bl	8002e30 <__swbuf_r>
 8002da0:	3001      	adds	r0, #1
 8002da2:	d011      	beq.n	8002dc8 <_puts_r+0x84>
 8002da4:	250a      	movs	r5, #10
 8002da6:	e011      	b.n	8002dcc <_puts_r+0x88>
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <_puts_r+0xd4>)
 8002daa:	429c      	cmp	r4, r3
 8002dac:	d101      	bne.n	8002db2 <_puts_r+0x6e>
 8002dae:	68ac      	ldr	r4, [r5, #8]
 8002db0:	e7da      	b.n	8002d68 <_puts_r+0x24>
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <_puts_r+0xd8>)
 8002db4:	429c      	cmp	r4, r3
 8002db6:	bf08      	it	eq
 8002db8:	68ec      	ldreq	r4, [r5, #12]
 8002dba:	e7d5      	b.n	8002d68 <_puts_r+0x24>
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	f000 f888 	bl	8002ed4 <__swsetup_r>
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	d0dd      	beq.n	8002d84 <_puts_r+0x40>
 8002dc8:	f04f 35ff 	mov.w	r5, #4294967295
 8002dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dce:	07da      	lsls	r2, r3, #31
 8002dd0:	d405      	bmi.n	8002dde <_puts_r+0x9a>
 8002dd2:	89a3      	ldrh	r3, [r4, #12]
 8002dd4:	059b      	lsls	r3, r3, #22
 8002dd6:	d402      	bmi.n	8002dde <_puts_r+0x9a>
 8002dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dda:	f000 fa9e 	bl	800331a <__retarget_lock_release_recursive>
 8002dde:	4628      	mov	r0, r5
 8002de0:	bd70      	pop	{r4, r5, r6, pc}
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	da04      	bge.n	8002df0 <_puts_r+0xac>
 8002de6:	69a2      	ldr	r2, [r4, #24]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	dc06      	bgt.n	8002dfa <_puts_r+0xb6>
 8002dec:	290a      	cmp	r1, #10
 8002dee:	d004      	beq.n	8002dfa <_puts_r+0xb6>
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	6022      	str	r2, [r4, #0]
 8002df6:	7019      	strb	r1, [r3, #0]
 8002df8:	e7c5      	b.n	8002d86 <_puts_r+0x42>
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	f000 f817 	bl	8002e30 <__swbuf_r>
 8002e02:	3001      	adds	r0, #1
 8002e04:	d1bf      	bne.n	8002d86 <_puts_r+0x42>
 8002e06:	e7df      	b.n	8002dc8 <_puts_r+0x84>
 8002e08:	250a      	movs	r5, #10
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	6022      	str	r2, [r4, #0]
 8002e10:	701d      	strb	r5, [r3, #0]
 8002e12:	e7db      	b.n	8002dcc <_puts_r+0x88>
 8002e14:	080037f0 	.word	0x080037f0
 8002e18:	08003810 	.word	0x08003810
 8002e1c:	080037d0 	.word	0x080037d0

08002e20 <puts>:
 8002e20:	4b02      	ldr	r3, [pc, #8]	; (8002e2c <puts+0xc>)
 8002e22:	4601      	mov	r1, r0
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	f7ff bf8d 	b.w	8002d44 <_puts_r>
 8002e2a:	bf00      	nop
 8002e2c:	20000010 	.word	0x20000010

08002e30 <__swbuf_r>:
 8002e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e32:	460e      	mov	r6, r1
 8002e34:	4614      	mov	r4, r2
 8002e36:	4605      	mov	r5, r0
 8002e38:	b118      	cbz	r0, 8002e42 <__swbuf_r+0x12>
 8002e3a:	6983      	ldr	r3, [r0, #24]
 8002e3c:	b90b      	cbnz	r3, 8002e42 <__swbuf_r+0x12>
 8002e3e:	f000 f9cd 	bl	80031dc <__sinit>
 8002e42:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <__swbuf_r+0x98>)
 8002e44:	429c      	cmp	r4, r3
 8002e46:	d12b      	bne.n	8002ea0 <__swbuf_r+0x70>
 8002e48:	686c      	ldr	r4, [r5, #4]
 8002e4a:	69a3      	ldr	r3, [r4, #24]
 8002e4c:	60a3      	str	r3, [r4, #8]
 8002e4e:	89a3      	ldrh	r3, [r4, #12]
 8002e50:	071a      	lsls	r2, r3, #28
 8002e52:	d52f      	bpl.n	8002eb4 <__swbuf_r+0x84>
 8002e54:	6923      	ldr	r3, [r4, #16]
 8002e56:	b36b      	cbz	r3, 8002eb4 <__swbuf_r+0x84>
 8002e58:	6923      	ldr	r3, [r4, #16]
 8002e5a:	6820      	ldr	r0, [r4, #0]
 8002e5c:	b2f6      	uxtb	r6, r6
 8002e5e:	1ac0      	subs	r0, r0, r3
 8002e60:	6963      	ldr	r3, [r4, #20]
 8002e62:	4637      	mov	r7, r6
 8002e64:	4283      	cmp	r3, r0
 8002e66:	dc04      	bgt.n	8002e72 <__swbuf_r+0x42>
 8002e68:	4621      	mov	r1, r4
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	f000 f922 	bl	80030b4 <_fflush_r>
 8002e70:	bb30      	cbnz	r0, 8002ec0 <__swbuf_r+0x90>
 8002e72:	68a3      	ldr	r3, [r4, #8]
 8002e74:	3001      	adds	r0, #1
 8002e76:	3b01      	subs	r3, #1
 8002e78:	60a3      	str	r3, [r4, #8]
 8002e7a:	6823      	ldr	r3, [r4, #0]
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	6022      	str	r2, [r4, #0]
 8002e80:	701e      	strb	r6, [r3, #0]
 8002e82:	6963      	ldr	r3, [r4, #20]
 8002e84:	4283      	cmp	r3, r0
 8002e86:	d004      	beq.n	8002e92 <__swbuf_r+0x62>
 8002e88:	89a3      	ldrh	r3, [r4, #12]
 8002e8a:	07db      	lsls	r3, r3, #31
 8002e8c:	d506      	bpl.n	8002e9c <__swbuf_r+0x6c>
 8002e8e:	2e0a      	cmp	r6, #10
 8002e90:	d104      	bne.n	8002e9c <__swbuf_r+0x6c>
 8002e92:	4621      	mov	r1, r4
 8002e94:	4628      	mov	r0, r5
 8002e96:	f000 f90d 	bl	80030b4 <_fflush_r>
 8002e9a:	b988      	cbnz	r0, 8002ec0 <__swbuf_r+0x90>
 8002e9c:	4638      	mov	r0, r7
 8002e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <__swbuf_r+0x9c>)
 8002ea2:	429c      	cmp	r4, r3
 8002ea4:	d101      	bne.n	8002eaa <__swbuf_r+0x7a>
 8002ea6:	68ac      	ldr	r4, [r5, #8]
 8002ea8:	e7cf      	b.n	8002e4a <__swbuf_r+0x1a>
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <__swbuf_r+0xa0>)
 8002eac:	429c      	cmp	r4, r3
 8002eae:	bf08      	it	eq
 8002eb0:	68ec      	ldreq	r4, [r5, #12]
 8002eb2:	e7ca      	b.n	8002e4a <__swbuf_r+0x1a>
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	4628      	mov	r0, r5
 8002eb8:	f000 f80c 	bl	8002ed4 <__swsetup_r>
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	d0cb      	beq.n	8002e58 <__swbuf_r+0x28>
 8002ec0:	f04f 37ff 	mov.w	r7, #4294967295
 8002ec4:	e7ea      	b.n	8002e9c <__swbuf_r+0x6c>
 8002ec6:	bf00      	nop
 8002ec8:	080037f0 	.word	0x080037f0
 8002ecc:	08003810 	.word	0x08003810
 8002ed0:	080037d0 	.word	0x080037d0

08002ed4 <__swsetup_r>:
 8002ed4:	4b32      	ldr	r3, [pc, #200]	; (8002fa0 <__swsetup_r+0xcc>)
 8002ed6:	b570      	push	{r4, r5, r6, lr}
 8002ed8:	681d      	ldr	r5, [r3, #0]
 8002eda:	4606      	mov	r6, r0
 8002edc:	460c      	mov	r4, r1
 8002ede:	b125      	cbz	r5, 8002eea <__swsetup_r+0x16>
 8002ee0:	69ab      	ldr	r3, [r5, #24]
 8002ee2:	b913      	cbnz	r3, 8002eea <__swsetup_r+0x16>
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	f000 f979 	bl	80031dc <__sinit>
 8002eea:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <__swsetup_r+0xd0>)
 8002eec:	429c      	cmp	r4, r3
 8002eee:	d10f      	bne.n	8002f10 <__swsetup_r+0x3c>
 8002ef0:	686c      	ldr	r4, [r5, #4]
 8002ef2:	89a3      	ldrh	r3, [r4, #12]
 8002ef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ef8:	0719      	lsls	r1, r3, #28
 8002efa:	d42c      	bmi.n	8002f56 <__swsetup_r+0x82>
 8002efc:	06dd      	lsls	r5, r3, #27
 8002efe:	d411      	bmi.n	8002f24 <__swsetup_r+0x50>
 8002f00:	2309      	movs	r3, #9
 8002f02:	6033      	str	r3, [r6, #0]
 8002f04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	81a3      	strh	r3, [r4, #12]
 8002f0e:	e03e      	b.n	8002f8e <__swsetup_r+0xba>
 8002f10:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <__swsetup_r+0xd4>)
 8002f12:	429c      	cmp	r4, r3
 8002f14:	d101      	bne.n	8002f1a <__swsetup_r+0x46>
 8002f16:	68ac      	ldr	r4, [r5, #8]
 8002f18:	e7eb      	b.n	8002ef2 <__swsetup_r+0x1e>
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <__swsetup_r+0xd8>)
 8002f1c:	429c      	cmp	r4, r3
 8002f1e:	bf08      	it	eq
 8002f20:	68ec      	ldreq	r4, [r5, #12]
 8002f22:	e7e6      	b.n	8002ef2 <__swsetup_r+0x1e>
 8002f24:	0758      	lsls	r0, r3, #29
 8002f26:	d512      	bpl.n	8002f4e <__swsetup_r+0x7a>
 8002f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f2a:	b141      	cbz	r1, 8002f3e <__swsetup_r+0x6a>
 8002f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f30:	4299      	cmp	r1, r3
 8002f32:	d002      	beq.n	8002f3a <__swsetup_r+0x66>
 8002f34:	4630      	mov	r0, r6
 8002f36:	f000 fa57 	bl	80033e8 <_free_r>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	6363      	str	r3, [r4, #52]	; 0x34
 8002f3e:	89a3      	ldrh	r3, [r4, #12]
 8002f40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f44:	81a3      	strh	r3, [r4, #12]
 8002f46:	2300      	movs	r3, #0
 8002f48:	6063      	str	r3, [r4, #4]
 8002f4a:	6923      	ldr	r3, [r4, #16]
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	89a3      	ldrh	r3, [r4, #12]
 8002f50:	f043 0308 	orr.w	r3, r3, #8
 8002f54:	81a3      	strh	r3, [r4, #12]
 8002f56:	6923      	ldr	r3, [r4, #16]
 8002f58:	b94b      	cbnz	r3, 8002f6e <__swsetup_r+0x9a>
 8002f5a:	89a3      	ldrh	r3, [r4, #12]
 8002f5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f64:	d003      	beq.n	8002f6e <__swsetup_r+0x9a>
 8002f66:	4621      	mov	r1, r4
 8002f68:	4630      	mov	r0, r6
 8002f6a:	f000 f9fd 	bl	8003368 <__smakebuf_r>
 8002f6e:	89a0      	ldrh	r0, [r4, #12]
 8002f70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f74:	f010 0301 	ands.w	r3, r0, #1
 8002f78:	d00a      	beq.n	8002f90 <__swsetup_r+0xbc>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60a3      	str	r3, [r4, #8]
 8002f7e:	6963      	ldr	r3, [r4, #20]
 8002f80:	425b      	negs	r3, r3
 8002f82:	61a3      	str	r3, [r4, #24]
 8002f84:	6923      	ldr	r3, [r4, #16]
 8002f86:	b943      	cbnz	r3, 8002f9a <__swsetup_r+0xc6>
 8002f88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f8c:	d1ba      	bne.n	8002f04 <__swsetup_r+0x30>
 8002f8e:	bd70      	pop	{r4, r5, r6, pc}
 8002f90:	0781      	lsls	r1, r0, #30
 8002f92:	bf58      	it	pl
 8002f94:	6963      	ldrpl	r3, [r4, #20]
 8002f96:	60a3      	str	r3, [r4, #8]
 8002f98:	e7f4      	b.n	8002f84 <__swsetup_r+0xb0>
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	e7f7      	b.n	8002f8e <__swsetup_r+0xba>
 8002f9e:	bf00      	nop
 8002fa0:	20000010 	.word	0x20000010
 8002fa4:	080037f0 	.word	0x080037f0
 8002fa8:	08003810 	.word	0x08003810
 8002fac:	080037d0 	.word	0x080037d0

08002fb0 <__sflush_r>:
 8002fb0:	898a      	ldrh	r2, [r1, #12]
 8002fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb4:	4605      	mov	r5, r0
 8002fb6:	0710      	lsls	r0, r2, #28
 8002fb8:	460c      	mov	r4, r1
 8002fba:	d457      	bmi.n	800306c <__sflush_r+0xbc>
 8002fbc:	684b      	ldr	r3, [r1, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	dc04      	bgt.n	8002fcc <__sflush_r+0x1c>
 8002fc2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	dc01      	bgt.n	8002fcc <__sflush_r+0x1c>
 8002fc8:	2000      	movs	r0, #0
 8002fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fce:	2e00      	cmp	r6, #0
 8002fd0:	d0fa      	beq.n	8002fc8 <__sflush_r+0x18>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fd8:	682f      	ldr	r7, [r5, #0]
 8002fda:	602b      	str	r3, [r5, #0]
 8002fdc:	d032      	beq.n	8003044 <__sflush_r+0x94>
 8002fde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	075a      	lsls	r2, r3, #29
 8002fe4:	d505      	bpl.n	8002ff2 <__sflush_r+0x42>
 8002fe6:	6863      	ldr	r3, [r4, #4]
 8002fe8:	1ac0      	subs	r0, r0, r3
 8002fea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fec:	b10b      	cbz	r3, 8002ff2 <__sflush_r+0x42>
 8002fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ff0:	1ac0      	subs	r0, r0, r3
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	6a21      	ldr	r1, [r4, #32]
 8002ffc:	47b0      	blx	r6
 8002ffe:	1c43      	adds	r3, r0, #1
 8003000:	89a3      	ldrh	r3, [r4, #12]
 8003002:	d106      	bne.n	8003012 <__sflush_r+0x62>
 8003004:	6829      	ldr	r1, [r5, #0]
 8003006:	291d      	cmp	r1, #29
 8003008:	d82c      	bhi.n	8003064 <__sflush_r+0xb4>
 800300a:	4a29      	ldr	r2, [pc, #164]	; (80030b0 <__sflush_r+0x100>)
 800300c:	40ca      	lsrs	r2, r1
 800300e:	07d6      	lsls	r6, r2, #31
 8003010:	d528      	bpl.n	8003064 <__sflush_r+0xb4>
 8003012:	2200      	movs	r2, #0
 8003014:	6062      	str	r2, [r4, #4]
 8003016:	6922      	ldr	r2, [r4, #16]
 8003018:	04d9      	lsls	r1, r3, #19
 800301a:	6022      	str	r2, [r4, #0]
 800301c:	d504      	bpl.n	8003028 <__sflush_r+0x78>
 800301e:	1c42      	adds	r2, r0, #1
 8003020:	d101      	bne.n	8003026 <__sflush_r+0x76>
 8003022:	682b      	ldr	r3, [r5, #0]
 8003024:	b903      	cbnz	r3, 8003028 <__sflush_r+0x78>
 8003026:	6560      	str	r0, [r4, #84]	; 0x54
 8003028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800302a:	602f      	str	r7, [r5, #0]
 800302c:	2900      	cmp	r1, #0
 800302e:	d0cb      	beq.n	8002fc8 <__sflush_r+0x18>
 8003030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003034:	4299      	cmp	r1, r3
 8003036:	d002      	beq.n	800303e <__sflush_r+0x8e>
 8003038:	4628      	mov	r0, r5
 800303a:	f000 f9d5 	bl	80033e8 <_free_r>
 800303e:	2000      	movs	r0, #0
 8003040:	6360      	str	r0, [r4, #52]	; 0x34
 8003042:	e7c2      	b.n	8002fca <__sflush_r+0x1a>
 8003044:	6a21      	ldr	r1, [r4, #32]
 8003046:	2301      	movs	r3, #1
 8003048:	4628      	mov	r0, r5
 800304a:	47b0      	blx	r6
 800304c:	1c41      	adds	r1, r0, #1
 800304e:	d1c7      	bne.n	8002fe0 <__sflush_r+0x30>
 8003050:	682b      	ldr	r3, [r5, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0c4      	beq.n	8002fe0 <__sflush_r+0x30>
 8003056:	2b1d      	cmp	r3, #29
 8003058:	d001      	beq.n	800305e <__sflush_r+0xae>
 800305a:	2b16      	cmp	r3, #22
 800305c:	d101      	bne.n	8003062 <__sflush_r+0xb2>
 800305e:	602f      	str	r7, [r5, #0]
 8003060:	e7b2      	b.n	8002fc8 <__sflush_r+0x18>
 8003062:	89a3      	ldrh	r3, [r4, #12]
 8003064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003068:	81a3      	strh	r3, [r4, #12]
 800306a:	e7ae      	b.n	8002fca <__sflush_r+0x1a>
 800306c:	690f      	ldr	r7, [r1, #16]
 800306e:	2f00      	cmp	r7, #0
 8003070:	d0aa      	beq.n	8002fc8 <__sflush_r+0x18>
 8003072:	0793      	lsls	r3, r2, #30
 8003074:	bf18      	it	ne
 8003076:	2300      	movne	r3, #0
 8003078:	680e      	ldr	r6, [r1, #0]
 800307a:	bf08      	it	eq
 800307c:	694b      	ldreq	r3, [r1, #20]
 800307e:	1bf6      	subs	r6, r6, r7
 8003080:	600f      	str	r7, [r1, #0]
 8003082:	608b      	str	r3, [r1, #8]
 8003084:	2e00      	cmp	r6, #0
 8003086:	dd9f      	ble.n	8002fc8 <__sflush_r+0x18>
 8003088:	4633      	mov	r3, r6
 800308a:	463a      	mov	r2, r7
 800308c:	4628      	mov	r0, r5
 800308e:	6a21      	ldr	r1, [r4, #32]
 8003090:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003094:	47e0      	blx	ip
 8003096:	2800      	cmp	r0, #0
 8003098:	dc06      	bgt.n	80030a8 <__sflush_r+0xf8>
 800309a:	89a3      	ldrh	r3, [r4, #12]
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030a4:	81a3      	strh	r3, [r4, #12]
 80030a6:	e790      	b.n	8002fca <__sflush_r+0x1a>
 80030a8:	4407      	add	r7, r0
 80030aa:	1a36      	subs	r6, r6, r0
 80030ac:	e7ea      	b.n	8003084 <__sflush_r+0xd4>
 80030ae:	bf00      	nop
 80030b0:	20400001 	.word	0x20400001

080030b4 <_fflush_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	690b      	ldr	r3, [r1, #16]
 80030b8:	4605      	mov	r5, r0
 80030ba:	460c      	mov	r4, r1
 80030bc:	b913      	cbnz	r3, 80030c4 <_fflush_r+0x10>
 80030be:	2500      	movs	r5, #0
 80030c0:	4628      	mov	r0, r5
 80030c2:	bd38      	pop	{r3, r4, r5, pc}
 80030c4:	b118      	cbz	r0, 80030ce <_fflush_r+0x1a>
 80030c6:	6983      	ldr	r3, [r0, #24]
 80030c8:	b90b      	cbnz	r3, 80030ce <_fflush_r+0x1a>
 80030ca:	f000 f887 	bl	80031dc <__sinit>
 80030ce:	4b14      	ldr	r3, [pc, #80]	; (8003120 <_fflush_r+0x6c>)
 80030d0:	429c      	cmp	r4, r3
 80030d2:	d11b      	bne.n	800310c <_fflush_r+0x58>
 80030d4:	686c      	ldr	r4, [r5, #4]
 80030d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0ef      	beq.n	80030be <_fflush_r+0xa>
 80030de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030e0:	07d0      	lsls	r0, r2, #31
 80030e2:	d404      	bmi.n	80030ee <_fflush_r+0x3a>
 80030e4:	0599      	lsls	r1, r3, #22
 80030e6:	d402      	bmi.n	80030ee <_fflush_r+0x3a>
 80030e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ea:	f000 f915 	bl	8003318 <__retarget_lock_acquire_recursive>
 80030ee:	4628      	mov	r0, r5
 80030f0:	4621      	mov	r1, r4
 80030f2:	f7ff ff5d 	bl	8002fb0 <__sflush_r>
 80030f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030f8:	4605      	mov	r5, r0
 80030fa:	07da      	lsls	r2, r3, #31
 80030fc:	d4e0      	bmi.n	80030c0 <_fflush_r+0xc>
 80030fe:	89a3      	ldrh	r3, [r4, #12]
 8003100:	059b      	lsls	r3, r3, #22
 8003102:	d4dd      	bmi.n	80030c0 <_fflush_r+0xc>
 8003104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003106:	f000 f908 	bl	800331a <__retarget_lock_release_recursive>
 800310a:	e7d9      	b.n	80030c0 <_fflush_r+0xc>
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <_fflush_r+0x70>)
 800310e:	429c      	cmp	r4, r3
 8003110:	d101      	bne.n	8003116 <_fflush_r+0x62>
 8003112:	68ac      	ldr	r4, [r5, #8]
 8003114:	e7df      	b.n	80030d6 <_fflush_r+0x22>
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <_fflush_r+0x74>)
 8003118:	429c      	cmp	r4, r3
 800311a:	bf08      	it	eq
 800311c:	68ec      	ldreq	r4, [r5, #12]
 800311e:	e7da      	b.n	80030d6 <_fflush_r+0x22>
 8003120:	080037f0 	.word	0x080037f0
 8003124:	08003810 	.word	0x08003810
 8003128:	080037d0 	.word	0x080037d0

0800312c <std>:
 800312c:	2300      	movs	r3, #0
 800312e:	b510      	push	{r4, lr}
 8003130:	4604      	mov	r4, r0
 8003132:	e9c0 3300 	strd	r3, r3, [r0]
 8003136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800313a:	6083      	str	r3, [r0, #8]
 800313c:	8181      	strh	r1, [r0, #12]
 800313e:	6643      	str	r3, [r0, #100]	; 0x64
 8003140:	81c2      	strh	r2, [r0, #14]
 8003142:	6183      	str	r3, [r0, #24]
 8003144:	4619      	mov	r1, r3
 8003146:	2208      	movs	r2, #8
 8003148:	305c      	adds	r0, #92	; 0x5c
 800314a:	f7ff fdf3 	bl	8002d34 <memset>
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <std+0x38>)
 8003150:	6224      	str	r4, [r4, #32]
 8003152:	6263      	str	r3, [r4, #36]	; 0x24
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <std+0x3c>)
 8003156:	62a3      	str	r3, [r4, #40]	; 0x28
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <std+0x40>)
 800315a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <std+0x44>)
 800315e:	6323      	str	r3, [r4, #48]	; 0x30
 8003160:	bd10      	pop	{r4, pc}
 8003162:	bf00      	nop
 8003164:	080035c1 	.word	0x080035c1
 8003168:	080035e3 	.word	0x080035e3
 800316c:	0800361b 	.word	0x0800361b
 8003170:	0800363f 	.word	0x0800363f

08003174 <_cleanup_r>:
 8003174:	4901      	ldr	r1, [pc, #4]	; (800317c <_cleanup_r+0x8>)
 8003176:	f000 b8af 	b.w	80032d8 <_fwalk_reent>
 800317a:	bf00      	nop
 800317c:	080030b5 	.word	0x080030b5

08003180 <__sfmoreglue>:
 8003180:	2268      	movs	r2, #104	; 0x68
 8003182:	b570      	push	{r4, r5, r6, lr}
 8003184:	1e4d      	subs	r5, r1, #1
 8003186:	4355      	muls	r5, r2
 8003188:	460e      	mov	r6, r1
 800318a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800318e:	f000 f993 	bl	80034b8 <_malloc_r>
 8003192:	4604      	mov	r4, r0
 8003194:	b140      	cbz	r0, 80031a8 <__sfmoreglue+0x28>
 8003196:	2100      	movs	r1, #0
 8003198:	e9c0 1600 	strd	r1, r6, [r0]
 800319c:	300c      	adds	r0, #12
 800319e:	60a0      	str	r0, [r4, #8]
 80031a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80031a4:	f7ff fdc6 	bl	8002d34 <memset>
 80031a8:	4620      	mov	r0, r4
 80031aa:	bd70      	pop	{r4, r5, r6, pc}

080031ac <__sfp_lock_acquire>:
 80031ac:	4801      	ldr	r0, [pc, #4]	; (80031b4 <__sfp_lock_acquire+0x8>)
 80031ae:	f000 b8b3 	b.w	8003318 <__retarget_lock_acquire_recursive>
 80031b2:	bf00      	nop
 80031b4:	20001185 	.word	0x20001185

080031b8 <__sfp_lock_release>:
 80031b8:	4801      	ldr	r0, [pc, #4]	; (80031c0 <__sfp_lock_release+0x8>)
 80031ba:	f000 b8ae 	b.w	800331a <__retarget_lock_release_recursive>
 80031be:	bf00      	nop
 80031c0:	20001185 	.word	0x20001185

080031c4 <__sinit_lock_acquire>:
 80031c4:	4801      	ldr	r0, [pc, #4]	; (80031cc <__sinit_lock_acquire+0x8>)
 80031c6:	f000 b8a7 	b.w	8003318 <__retarget_lock_acquire_recursive>
 80031ca:	bf00      	nop
 80031cc:	20001186 	.word	0x20001186

080031d0 <__sinit_lock_release>:
 80031d0:	4801      	ldr	r0, [pc, #4]	; (80031d8 <__sinit_lock_release+0x8>)
 80031d2:	f000 b8a2 	b.w	800331a <__retarget_lock_release_recursive>
 80031d6:	bf00      	nop
 80031d8:	20001186 	.word	0x20001186

080031dc <__sinit>:
 80031dc:	b510      	push	{r4, lr}
 80031de:	4604      	mov	r4, r0
 80031e0:	f7ff fff0 	bl	80031c4 <__sinit_lock_acquire>
 80031e4:	69a3      	ldr	r3, [r4, #24]
 80031e6:	b11b      	cbz	r3, 80031f0 <__sinit+0x14>
 80031e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031ec:	f7ff bff0 	b.w	80031d0 <__sinit_lock_release>
 80031f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80031f4:	6523      	str	r3, [r4, #80]	; 0x50
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <__sinit+0x68>)
 80031f8:	4a13      	ldr	r2, [pc, #76]	; (8003248 <__sinit+0x6c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80031fe:	42a3      	cmp	r3, r4
 8003200:	bf08      	it	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	4620      	mov	r0, r4
 8003206:	bf08      	it	eq
 8003208:	61a3      	streq	r3, [r4, #24]
 800320a:	f000 f81f 	bl	800324c <__sfp>
 800320e:	6060      	str	r0, [r4, #4]
 8003210:	4620      	mov	r0, r4
 8003212:	f000 f81b 	bl	800324c <__sfp>
 8003216:	60a0      	str	r0, [r4, #8]
 8003218:	4620      	mov	r0, r4
 800321a:	f000 f817 	bl	800324c <__sfp>
 800321e:	2200      	movs	r2, #0
 8003220:	2104      	movs	r1, #4
 8003222:	60e0      	str	r0, [r4, #12]
 8003224:	6860      	ldr	r0, [r4, #4]
 8003226:	f7ff ff81 	bl	800312c <std>
 800322a:	2201      	movs	r2, #1
 800322c:	2109      	movs	r1, #9
 800322e:	68a0      	ldr	r0, [r4, #8]
 8003230:	f7ff ff7c 	bl	800312c <std>
 8003234:	2202      	movs	r2, #2
 8003236:	2112      	movs	r1, #18
 8003238:	68e0      	ldr	r0, [r4, #12]
 800323a:	f7ff ff77 	bl	800312c <std>
 800323e:	2301      	movs	r3, #1
 8003240:	61a3      	str	r3, [r4, #24]
 8003242:	e7d1      	b.n	80031e8 <__sinit+0xc>
 8003244:	080037cc 	.word	0x080037cc
 8003248:	08003175 	.word	0x08003175

0800324c <__sfp>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	4607      	mov	r7, r0
 8003250:	f7ff ffac 	bl	80031ac <__sfp_lock_acquire>
 8003254:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <__sfp+0x84>)
 8003256:	681e      	ldr	r6, [r3, #0]
 8003258:	69b3      	ldr	r3, [r6, #24]
 800325a:	b913      	cbnz	r3, 8003262 <__sfp+0x16>
 800325c:	4630      	mov	r0, r6
 800325e:	f7ff ffbd 	bl	80031dc <__sinit>
 8003262:	3648      	adds	r6, #72	; 0x48
 8003264:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003268:	3b01      	subs	r3, #1
 800326a:	d503      	bpl.n	8003274 <__sfp+0x28>
 800326c:	6833      	ldr	r3, [r6, #0]
 800326e:	b30b      	cbz	r3, 80032b4 <__sfp+0x68>
 8003270:	6836      	ldr	r6, [r6, #0]
 8003272:	e7f7      	b.n	8003264 <__sfp+0x18>
 8003274:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003278:	b9d5      	cbnz	r5, 80032b0 <__sfp+0x64>
 800327a:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <__sfp+0x88>)
 800327c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003280:	60e3      	str	r3, [r4, #12]
 8003282:	6665      	str	r5, [r4, #100]	; 0x64
 8003284:	f000 f847 	bl	8003316 <__retarget_lock_init_recursive>
 8003288:	f7ff ff96 	bl	80031b8 <__sfp_lock_release>
 800328c:	2208      	movs	r2, #8
 800328e:	4629      	mov	r1, r5
 8003290:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003294:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003298:	6025      	str	r5, [r4, #0]
 800329a:	61a5      	str	r5, [r4, #24]
 800329c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80032a0:	f7ff fd48 	bl	8002d34 <memset>
 80032a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80032a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80032ac:	4620      	mov	r0, r4
 80032ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032b0:	3468      	adds	r4, #104	; 0x68
 80032b2:	e7d9      	b.n	8003268 <__sfp+0x1c>
 80032b4:	2104      	movs	r1, #4
 80032b6:	4638      	mov	r0, r7
 80032b8:	f7ff ff62 	bl	8003180 <__sfmoreglue>
 80032bc:	4604      	mov	r4, r0
 80032be:	6030      	str	r0, [r6, #0]
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d1d5      	bne.n	8003270 <__sfp+0x24>
 80032c4:	f7ff ff78 	bl	80031b8 <__sfp_lock_release>
 80032c8:	230c      	movs	r3, #12
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	e7ee      	b.n	80032ac <__sfp+0x60>
 80032ce:	bf00      	nop
 80032d0:	080037cc 	.word	0x080037cc
 80032d4:	ffff0001 	.word	0xffff0001

080032d8 <_fwalk_reent>:
 80032d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032dc:	4606      	mov	r6, r0
 80032de:	4688      	mov	r8, r1
 80032e0:	2700      	movs	r7, #0
 80032e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032ea:	f1b9 0901 	subs.w	r9, r9, #1
 80032ee:	d505      	bpl.n	80032fc <_fwalk_reent+0x24>
 80032f0:	6824      	ldr	r4, [r4, #0]
 80032f2:	2c00      	cmp	r4, #0
 80032f4:	d1f7      	bne.n	80032e6 <_fwalk_reent+0xe>
 80032f6:	4638      	mov	r0, r7
 80032f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032fc:	89ab      	ldrh	r3, [r5, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d907      	bls.n	8003312 <_fwalk_reent+0x3a>
 8003302:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003306:	3301      	adds	r3, #1
 8003308:	d003      	beq.n	8003312 <_fwalk_reent+0x3a>
 800330a:	4629      	mov	r1, r5
 800330c:	4630      	mov	r0, r6
 800330e:	47c0      	blx	r8
 8003310:	4307      	orrs	r7, r0
 8003312:	3568      	adds	r5, #104	; 0x68
 8003314:	e7e9      	b.n	80032ea <_fwalk_reent+0x12>

08003316 <__retarget_lock_init_recursive>:
 8003316:	4770      	bx	lr

08003318 <__retarget_lock_acquire_recursive>:
 8003318:	4770      	bx	lr

0800331a <__retarget_lock_release_recursive>:
 800331a:	4770      	bx	lr

0800331c <__swhatbuf_r>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	460e      	mov	r6, r1
 8003320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003324:	4614      	mov	r4, r2
 8003326:	2900      	cmp	r1, #0
 8003328:	461d      	mov	r5, r3
 800332a:	b096      	sub	sp, #88	; 0x58
 800332c:	da08      	bge.n	8003340 <__swhatbuf_r+0x24>
 800332e:	2200      	movs	r2, #0
 8003330:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003334:	602a      	str	r2, [r5, #0]
 8003336:	061a      	lsls	r2, r3, #24
 8003338:	d410      	bmi.n	800335c <__swhatbuf_r+0x40>
 800333a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800333e:	e00e      	b.n	800335e <__swhatbuf_r+0x42>
 8003340:	466a      	mov	r2, sp
 8003342:	f000 f9a3 	bl	800368c <_fstat_r>
 8003346:	2800      	cmp	r0, #0
 8003348:	dbf1      	blt.n	800332e <__swhatbuf_r+0x12>
 800334a:	9a01      	ldr	r2, [sp, #4]
 800334c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003350:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003354:	425a      	negs	r2, r3
 8003356:	415a      	adcs	r2, r3
 8003358:	602a      	str	r2, [r5, #0]
 800335a:	e7ee      	b.n	800333a <__swhatbuf_r+0x1e>
 800335c:	2340      	movs	r3, #64	; 0x40
 800335e:	2000      	movs	r0, #0
 8003360:	6023      	str	r3, [r4, #0]
 8003362:	b016      	add	sp, #88	; 0x58
 8003364:	bd70      	pop	{r4, r5, r6, pc}
	...

08003368 <__smakebuf_r>:
 8003368:	898b      	ldrh	r3, [r1, #12]
 800336a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800336c:	079d      	lsls	r5, r3, #30
 800336e:	4606      	mov	r6, r0
 8003370:	460c      	mov	r4, r1
 8003372:	d507      	bpl.n	8003384 <__smakebuf_r+0x1c>
 8003374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003378:	6023      	str	r3, [r4, #0]
 800337a:	6123      	str	r3, [r4, #16]
 800337c:	2301      	movs	r3, #1
 800337e:	6163      	str	r3, [r4, #20]
 8003380:	b002      	add	sp, #8
 8003382:	bd70      	pop	{r4, r5, r6, pc}
 8003384:	466a      	mov	r2, sp
 8003386:	ab01      	add	r3, sp, #4
 8003388:	f7ff ffc8 	bl	800331c <__swhatbuf_r>
 800338c:	9900      	ldr	r1, [sp, #0]
 800338e:	4605      	mov	r5, r0
 8003390:	4630      	mov	r0, r6
 8003392:	f000 f891 	bl	80034b8 <_malloc_r>
 8003396:	b948      	cbnz	r0, 80033ac <__smakebuf_r+0x44>
 8003398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800339c:	059a      	lsls	r2, r3, #22
 800339e:	d4ef      	bmi.n	8003380 <__smakebuf_r+0x18>
 80033a0:	f023 0303 	bic.w	r3, r3, #3
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	81a3      	strh	r3, [r4, #12]
 80033aa:	e7e3      	b.n	8003374 <__smakebuf_r+0xc>
 80033ac:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <__smakebuf_r+0x7c>)
 80033ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80033b0:	89a3      	ldrh	r3, [r4, #12]
 80033b2:	6020      	str	r0, [r4, #0]
 80033b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b8:	81a3      	strh	r3, [r4, #12]
 80033ba:	9b00      	ldr	r3, [sp, #0]
 80033bc:	6120      	str	r0, [r4, #16]
 80033be:	6163      	str	r3, [r4, #20]
 80033c0:	9b01      	ldr	r3, [sp, #4]
 80033c2:	b15b      	cbz	r3, 80033dc <__smakebuf_r+0x74>
 80033c4:	4630      	mov	r0, r6
 80033c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033ca:	f000 f971 	bl	80036b0 <_isatty_r>
 80033ce:	b128      	cbz	r0, 80033dc <__smakebuf_r+0x74>
 80033d0:	89a3      	ldrh	r3, [r4, #12]
 80033d2:	f023 0303 	bic.w	r3, r3, #3
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	81a3      	strh	r3, [r4, #12]
 80033dc:	89a0      	ldrh	r0, [r4, #12]
 80033de:	4305      	orrs	r5, r0
 80033e0:	81a5      	strh	r5, [r4, #12]
 80033e2:	e7cd      	b.n	8003380 <__smakebuf_r+0x18>
 80033e4:	08003175 	.word	0x08003175

080033e8 <_free_r>:
 80033e8:	b538      	push	{r3, r4, r5, lr}
 80033ea:	4605      	mov	r5, r0
 80033ec:	2900      	cmp	r1, #0
 80033ee:	d040      	beq.n	8003472 <_free_r+0x8a>
 80033f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033f4:	1f0c      	subs	r4, r1, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bfb8      	it	lt
 80033fa:	18e4      	addlt	r4, r4, r3
 80033fc:	f000 f97a 	bl	80036f4 <__malloc_lock>
 8003400:	4a1c      	ldr	r2, [pc, #112]	; (8003474 <_free_r+0x8c>)
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	b933      	cbnz	r3, 8003414 <_free_r+0x2c>
 8003406:	6063      	str	r3, [r4, #4]
 8003408:	6014      	str	r4, [r2, #0]
 800340a:	4628      	mov	r0, r5
 800340c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003410:	f000 b976 	b.w	8003700 <__malloc_unlock>
 8003414:	42a3      	cmp	r3, r4
 8003416:	d908      	bls.n	800342a <_free_r+0x42>
 8003418:	6820      	ldr	r0, [r4, #0]
 800341a:	1821      	adds	r1, r4, r0
 800341c:	428b      	cmp	r3, r1
 800341e:	bf01      	itttt	eq
 8003420:	6819      	ldreq	r1, [r3, #0]
 8003422:	685b      	ldreq	r3, [r3, #4]
 8003424:	1809      	addeq	r1, r1, r0
 8003426:	6021      	streq	r1, [r4, #0]
 8003428:	e7ed      	b.n	8003406 <_free_r+0x1e>
 800342a:	461a      	mov	r2, r3
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	b10b      	cbz	r3, 8003434 <_free_r+0x4c>
 8003430:	42a3      	cmp	r3, r4
 8003432:	d9fa      	bls.n	800342a <_free_r+0x42>
 8003434:	6811      	ldr	r1, [r2, #0]
 8003436:	1850      	adds	r0, r2, r1
 8003438:	42a0      	cmp	r0, r4
 800343a:	d10b      	bne.n	8003454 <_free_r+0x6c>
 800343c:	6820      	ldr	r0, [r4, #0]
 800343e:	4401      	add	r1, r0
 8003440:	1850      	adds	r0, r2, r1
 8003442:	4283      	cmp	r3, r0
 8003444:	6011      	str	r1, [r2, #0]
 8003446:	d1e0      	bne.n	800340a <_free_r+0x22>
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	4401      	add	r1, r0
 800344e:	6011      	str	r1, [r2, #0]
 8003450:	6053      	str	r3, [r2, #4]
 8003452:	e7da      	b.n	800340a <_free_r+0x22>
 8003454:	d902      	bls.n	800345c <_free_r+0x74>
 8003456:	230c      	movs	r3, #12
 8003458:	602b      	str	r3, [r5, #0]
 800345a:	e7d6      	b.n	800340a <_free_r+0x22>
 800345c:	6820      	ldr	r0, [r4, #0]
 800345e:	1821      	adds	r1, r4, r0
 8003460:	428b      	cmp	r3, r1
 8003462:	bf01      	itttt	eq
 8003464:	6819      	ldreq	r1, [r3, #0]
 8003466:	685b      	ldreq	r3, [r3, #4]
 8003468:	1809      	addeq	r1, r1, r0
 800346a:	6021      	streq	r1, [r4, #0]
 800346c:	6063      	str	r3, [r4, #4]
 800346e:	6054      	str	r4, [r2, #4]
 8003470:	e7cb      	b.n	800340a <_free_r+0x22>
 8003472:	bd38      	pop	{r3, r4, r5, pc}
 8003474:	20001188 	.word	0x20001188

08003478 <sbrk_aligned>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	4e0e      	ldr	r6, [pc, #56]	; (80034b4 <sbrk_aligned+0x3c>)
 800347c:	460c      	mov	r4, r1
 800347e:	6831      	ldr	r1, [r6, #0]
 8003480:	4605      	mov	r5, r0
 8003482:	b911      	cbnz	r1, 800348a <sbrk_aligned+0x12>
 8003484:	f000 f88c 	bl	80035a0 <_sbrk_r>
 8003488:	6030      	str	r0, [r6, #0]
 800348a:	4621      	mov	r1, r4
 800348c:	4628      	mov	r0, r5
 800348e:	f000 f887 	bl	80035a0 <_sbrk_r>
 8003492:	1c43      	adds	r3, r0, #1
 8003494:	d00a      	beq.n	80034ac <sbrk_aligned+0x34>
 8003496:	1cc4      	adds	r4, r0, #3
 8003498:	f024 0403 	bic.w	r4, r4, #3
 800349c:	42a0      	cmp	r0, r4
 800349e:	d007      	beq.n	80034b0 <sbrk_aligned+0x38>
 80034a0:	1a21      	subs	r1, r4, r0
 80034a2:	4628      	mov	r0, r5
 80034a4:	f000 f87c 	bl	80035a0 <_sbrk_r>
 80034a8:	3001      	adds	r0, #1
 80034aa:	d101      	bne.n	80034b0 <sbrk_aligned+0x38>
 80034ac:	f04f 34ff 	mov.w	r4, #4294967295
 80034b0:	4620      	mov	r0, r4
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
 80034b4:	2000118c 	.word	0x2000118c

080034b8 <_malloc_r>:
 80034b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034bc:	1ccd      	adds	r5, r1, #3
 80034be:	f025 0503 	bic.w	r5, r5, #3
 80034c2:	3508      	adds	r5, #8
 80034c4:	2d0c      	cmp	r5, #12
 80034c6:	bf38      	it	cc
 80034c8:	250c      	movcc	r5, #12
 80034ca:	2d00      	cmp	r5, #0
 80034cc:	4607      	mov	r7, r0
 80034ce:	db01      	blt.n	80034d4 <_malloc_r+0x1c>
 80034d0:	42a9      	cmp	r1, r5
 80034d2:	d905      	bls.n	80034e0 <_malloc_r+0x28>
 80034d4:	230c      	movs	r3, #12
 80034d6:	2600      	movs	r6, #0
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	4630      	mov	r0, r6
 80034dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034e0:	4e2e      	ldr	r6, [pc, #184]	; (800359c <_malloc_r+0xe4>)
 80034e2:	f000 f907 	bl	80036f4 <__malloc_lock>
 80034e6:	6833      	ldr	r3, [r6, #0]
 80034e8:	461c      	mov	r4, r3
 80034ea:	bb34      	cbnz	r4, 800353a <_malloc_r+0x82>
 80034ec:	4629      	mov	r1, r5
 80034ee:	4638      	mov	r0, r7
 80034f0:	f7ff ffc2 	bl	8003478 <sbrk_aligned>
 80034f4:	1c43      	adds	r3, r0, #1
 80034f6:	4604      	mov	r4, r0
 80034f8:	d14d      	bne.n	8003596 <_malloc_r+0xde>
 80034fa:	6834      	ldr	r4, [r6, #0]
 80034fc:	4626      	mov	r6, r4
 80034fe:	2e00      	cmp	r6, #0
 8003500:	d140      	bne.n	8003584 <_malloc_r+0xcc>
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	4631      	mov	r1, r6
 8003506:	4638      	mov	r0, r7
 8003508:	eb04 0803 	add.w	r8, r4, r3
 800350c:	f000 f848 	bl	80035a0 <_sbrk_r>
 8003510:	4580      	cmp	r8, r0
 8003512:	d13a      	bne.n	800358a <_malloc_r+0xd2>
 8003514:	6821      	ldr	r1, [r4, #0]
 8003516:	3503      	adds	r5, #3
 8003518:	1a6d      	subs	r5, r5, r1
 800351a:	f025 0503 	bic.w	r5, r5, #3
 800351e:	3508      	adds	r5, #8
 8003520:	2d0c      	cmp	r5, #12
 8003522:	bf38      	it	cc
 8003524:	250c      	movcc	r5, #12
 8003526:	4638      	mov	r0, r7
 8003528:	4629      	mov	r1, r5
 800352a:	f7ff ffa5 	bl	8003478 <sbrk_aligned>
 800352e:	3001      	adds	r0, #1
 8003530:	d02b      	beq.n	800358a <_malloc_r+0xd2>
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	442b      	add	r3, r5
 8003536:	6023      	str	r3, [r4, #0]
 8003538:	e00e      	b.n	8003558 <_malloc_r+0xa0>
 800353a:	6822      	ldr	r2, [r4, #0]
 800353c:	1b52      	subs	r2, r2, r5
 800353e:	d41e      	bmi.n	800357e <_malloc_r+0xc6>
 8003540:	2a0b      	cmp	r2, #11
 8003542:	d916      	bls.n	8003572 <_malloc_r+0xba>
 8003544:	1961      	adds	r1, r4, r5
 8003546:	42a3      	cmp	r3, r4
 8003548:	6025      	str	r5, [r4, #0]
 800354a:	bf18      	it	ne
 800354c:	6059      	strne	r1, [r3, #4]
 800354e:	6863      	ldr	r3, [r4, #4]
 8003550:	bf08      	it	eq
 8003552:	6031      	streq	r1, [r6, #0]
 8003554:	5162      	str	r2, [r4, r5]
 8003556:	604b      	str	r3, [r1, #4]
 8003558:	4638      	mov	r0, r7
 800355a:	f104 060b 	add.w	r6, r4, #11
 800355e:	f000 f8cf 	bl	8003700 <__malloc_unlock>
 8003562:	f026 0607 	bic.w	r6, r6, #7
 8003566:	1d23      	adds	r3, r4, #4
 8003568:	1af2      	subs	r2, r6, r3
 800356a:	d0b6      	beq.n	80034da <_malloc_r+0x22>
 800356c:	1b9b      	subs	r3, r3, r6
 800356e:	50a3      	str	r3, [r4, r2]
 8003570:	e7b3      	b.n	80034da <_malloc_r+0x22>
 8003572:	6862      	ldr	r2, [r4, #4]
 8003574:	42a3      	cmp	r3, r4
 8003576:	bf0c      	ite	eq
 8003578:	6032      	streq	r2, [r6, #0]
 800357a:	605a      	strne	r2, [r3, #4]
 800357c:	e7ec      	b.n	8003558 <_malloc_r+0xa0>
 800357e:	4623      	mov	r3, r4
 8003580:	6864      	ldr	r4, [r4, #4]
 8003582:	e7b2      	b.n	80034ea <_malloc_r+0x32>
 8003584:	4634      	mov	r4, r6
 8003586:	6876      	ldr	r6, [r6, #4]
 8003588:	e7b9      	b.n	80034fe <_malloc_r+0x46>
 800358a:	230c      	movs	r3, #12
 800358c:	4638      	mov	r0, r7
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	f000 f8b6 	bl	8003700 <__malloc_unlock>
 8003594:	e7a1      	b.n	80034da <_malloc_r+0x22>
 8003596:	6025      	str	r5, [r4, #0]
 8003598:	e7de      	b.n	8003558 <_malloc_r+0xa0>
 800359a:	bf00      	nop
 800359c:	20001188 	.word	0x20001188

080035a0 <_sbrk_r>:
 80035a0:	b538      	push	{r3, r4, r5, lr}
 80035a2:	2300      	movs	r3, #0
 80035a4:	4d05      	ldr	r5, [pc, #20]	; (80035bc <_sbrk_r+0x1c>)
 80035a6:	4604      	mov	r4, r0
 80035a8:	4608      	mov	r0, r1
 80035aa:	602b      	str	r3, [r5, #0]
 80035ac:	f7fc ffd4 	bl	8000558 <_sbrk>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	d102      	bne.n	80035ba <_sbrk_r+0x1a>
 80035b4:	682b      	ldr	r3, [r5, #0]
 80035b6:	b103      	cbz	r3, 80035ba <_sbrk_r+0x1a>
 80035b8:	6023      	str	r3, [r4, #0]
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	20001190 	.word	0x20001190

080035c0 <__sread>:
 80035c0:	b510      	push	{r4, lr}
 80035c2:	460c      	mov	r4, r1
 80035c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035c8:	f000 f8a0 	bl	800370c <_read_r>
 80035cc:	2800      	cmp	r0, #0
 80035ce:	bfab      	itete	ge
 80035d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035d2:	89a3      	ldrhlt	r3, [r4, #12]
 80035d4:	181b      	addge	r3, r3, r0
 80035d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035da:	bfac      	ite	ge
 80035dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80035de:	81a3      	strhlt	r3, [r4, #12]
 80035e0:	bd10      	pop	{r4, pc}

080035e2 <__swrite>:
 80035e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035e6:	461f      	mov	r7, r3
 80035e8:	898b      	ldrh	r3, [r1, #12]
 80035ea:	4605      	mov	r5, r0
 80035ec:	05db      	lsls	r3, r3, #23
 80035ee:	460c      	mov	r4, r1
 80035f0:	4616      	mov	r6, r2
 80035f2:	d505      	bpl.n	8003600 <__swrite+0x1e>
 80035f4:	2302      	movs	r3, #2
 80035f6:	2200      	movs	r2, #0
 80035f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035fc:	f000 f868 	bl	80036d0 <_lseek_r>
 8003600:	89a3      	ldrh	r3, [r4, #12]
 8003602:	4632      	mov	r2, r6
 8003604:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003608:	81a3      	strh	r3, [r4, #12]
 800360a:	4628      	mov	r0, r5
 800360c:	463b      	mov	r3, r7
 800360e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003616:	f000 b817 	b.w	8003648 <_write_r>

0800361a <__sseek>:
 800361a:	b510      	push	{r4, lr}
 800361c:	460c      	mov	r4, r1
 800361e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003622:	f000 f855 	bl	80036d0 <_lseek_r>
 8003626:	1c43      	adds	r3, r0, #1
 8003628:	89a3      	ldrh	r3, [r4, #12]
 800362a:	bf15      	itete	ne
 800362c:	6560      	strne	r0, [r4, #84]	; 0x54
 800362e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003636:	81a3      	strheq	r3, [r4, #12]
 8003638:	bf18      	it	ne
 800363a:	81a3      	strhne	r3, [r4, #12]
 800363c:	bd10      	pop	{r4, pc}

0800363e <__sclose>:
 800363e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003642:	f000 b813 	b.w	800366c <_close_r>
	...

08003648 <_write_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	4604      	mov	r4, r0
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	2200      	movs	r2, #0
 8003652:	4d05      	ldr	r5, [pc, #20]	; (8003668 <_write_r+0x20>)
 8003654:	602a      	str	r2, [r5, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	f7fc ff31 	bl	80004be <_write>
 800365c:	1c43      	adds	r3, r0, #1
 800365e:	d102      	bne.n	8003666 <_write_r+0x1e>
 8003660:	682b      	ldr	r3, [r5, #0]
 8003662:	b103      	cbz	r3, 8003666 <_write_r+0x1e>
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	bd38      	pop	{r3, r4, r5, pc}
 8003668:	20001190 	.word	0x20001190

0800366c <_close_r>:
 800366c:	b538      	push	{r3, r4, r5, lr}
 800366e:	2300      	movs	r3, #0
 8003670:	4d05      	ldr	r5, [pc, #20]	; (8003688 <_close_r+0x1c>)
 8003672:	4604      	mov	r4, r0
 8003674:	4608      	mov	r0, r1
 8003676:	602b      	str	r3, [r5, #0]
 8003678:	f7fc ff3d 	bl	80004f6 <_close>
 800367c:	1c43      	adds	r3, r0, #1
 800367e:	d102      	bne.n	8003686 <_close_r+0x1a>
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	b103      	cbz	r3, 8003686 <_close_r+0x1a>
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	bd38      	pop	{r3, r4, r5, pc}
 8003688:	20001190 	.word	0x20001190

0800368c <_fstat_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	2300      	movs	r3, #0
 8003690:	4d06      	ldr	r5, [pc, #24]	; (80036ac <_fstat_r+0x20>)
 8003692:	4604      	mov	r4, r0
 8003694:	4608      	mov	r0, r1
 8003696:	4611      	mov	r1, r2
 8003698:	602b      	str	r3, [r5, #0]
 800369a:	f7fc ff37 	bl	800050c <_fstat>
 800369e:	1c43      	adds	r3, r0, #1
 80036a0:	d102      	bne.n	80036a8 <_fstat_r+0x1c>
 80036a2:	682b      	ldr	r3, [r5, #0]
 80036a4:	b103      	cbz	r3, 80036a8 <_fstat_r+0x1c>
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	bd38      	pop	{r3, r4, r5, pc}
 80036aa:	bf00      	nop
 80036ac:	20001190 	.word	0x20001190

080036b0 <_isatty_r>:
 80036b0:	b538      	push	{r3, r4, r5, lr}
 80036b2:	2300      	movs	r3, #0
 80036b4:	4d05      	ldr	r5, [pc, #20]	; (80036cc <_isatty_r+0x1c>)
 80036b6:	4604      	mov	r4, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	602b      	str	r3, [r5, #0]
 80036bc:	f7fc ff35 	bl	800052a <_isatty>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	d102      	bne.n	80036ca <_isatty_r+0x1a>
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	b103      	cbz	r3, 80036ca <_isatty_r+0x1a>
 80036c8:	6023      	str	r3, [r4, #0]
 80036ca:	bd38      	pop	{r3, r4, r5, pc}
 80036cc:	20001190 	.word	0x20001190

080036d0 <_lseek_r>:
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	4604      	mov	r4, r0
 80036d4:	4608      	mov	r0, r1
 80036d6:	4611      	mov	r1, r2
 80036d8:	2200      	movs	r2, #0
 80036da:	4d05      	ldr	r5, [pc, #20]	; (80036f0 <_lseek_r+0x20>)
 80036dc:	602a      	str	r2, [r5, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	f7fc ff2d 	bl	800053e <_lseek>
 80036e4:	1c43      	adds	r3, r0, #1
 80036e6:	d102      	bne.n	80036ee <_lseek_r+0x1e>
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	b103      	cbz	r3, 80036ee <_lseek_r+0x1e>
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	bd38      	pop	{r3, r4, r5, pc}
 80036f0:	20001190 	.word	0x20001190

080036f4 <__malloc_lock>:
 80036f4:	4801      	ldr	r0, [pc, #4]	; (80036fc <__malloc_lock+0x8>)
 80036f6:	f7ff be0f 	b.w	8003318 <__retarget_lock_acquire_recursive>
 80036fa:	bf00      	nop
 80036fc:	20001184 	.word	0x20001184

08003700 <__malloc_unlock>:
 8003700:	4801      	ldr	r0, [pc, #4]	; (8003708 <__malloc_unlock+0x8>)
 8003702:	f7ff be0a 	b.w	800331a <__retarget_lock_release_recursive>
 8003706:	bf00      	nop
 8003708:	20001184 	.word	0x20001184

0800370c <_read_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4604      	mov	r4, r0
 8003710:	4608      	mov	r0, r1
 8003712:	4611      	mov	r1, r2
 8003714:	2200      	movs	r2, #0
 8003716:	4d05      	ldr	r5, [pc, #20]	; (800372c <_read_r+0x20>)
 8003718:	602a      	str	r2, [r5, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	f7fc feb2 	bl	8000484 <_read>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d102      	bne.n	800372a <_read_r+0x1e>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	b103      	cbz	r3, 800372a <_read_r+0x1e>
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	bd38      	pop	{r3, r4, r5, pc}
 800372c:	20001190 	.word	0x20001190

08003730 <_init>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	bf00      	nop
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr

0800373c <_fini>:
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373e:	bf00      	nop
 8003740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003742:	bc08      	pop	{r3}
 8003744:	469e      	mov	lr, r3
 8003746:	4770      	bx	lr
